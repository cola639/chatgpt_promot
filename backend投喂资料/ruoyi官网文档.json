[
  {
    "html": "RuoYi\n文档分离版微服务版移动端版💖赞助💖\n生态系统 \nGitHub \n(opens new window)\nGitee \n(opens new window)\n\n\n\n文档\n\n介绍\n快速了解\n环境部署\n项目介绍\n后台手册\n前端手册\n组件文档\n插件集成\n集成docker实现一键部署\n升级springboot到最新版本3.x\n集成ehcache实现本地缓存切换\n集成websocket实现实时通信\n集成electron实现桌面应用程序\n集成atomikos实现分布式事务\n集成minio实现分布式文件存储\n使用localstorage代替cookie\n使用undertow来替代tomcat容器\n集成actuator实现优雅关闭应用\n集成aj-captcha实现滑块验证码\n集成sharding-jdbc实现分库分表\n集成just-auth实现第三方授权登录\n集成watermark实现页面添加水印\n集成mybatisplus实现mybatis增强\n集成easyexcel实现excel表格增强\n集成knife4j实现swagger文档增强\n集成redisson实现redis分布式锁\n集成ip2region实现离线IP地址定位\n集成jsencrypt实现密码加密传输方式\n集成druid实现数据库密码加密功能\n集成browscap读取浏览器用户代理\n集成dynamic-datasource实现多数据源增强\n项目扩展\n视频教程\n更新日志\n\n其它\n\n常见问题\n捐赠支持\n#\n插件集成\n\n为了让开发者更加方便和快速的满足需求，提供了各种插件集成实现方案。\n\n#\n集成docker实现一键部署\n\nDocker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，最终只需要一个命令即可打包发布应用到任意平台中。\n\n1、安装docker\n\nyum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm\nyum install -y yum-utils device-mapper-persistent-data lvm2\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nyum install -y docker-ce\ncurl -L \"https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n1\n2\n3\n4\n5\n\n\n2、检查docker和docker-compose是否安装成功\n\ndocker version\ndocker-compose --version\n\n1\n2\n\n\n3、文件授权\n\nchmod +x /usr/local/bin/docker-compose\n\n1\n\n\n4、下载若依docker插件，上传到自己的服务器目录\n\n插件相关脚本实现ruoyi-vue/集成docker实现一键部署.zip\n\n链接: https://pan.baidu.com/s/13JVC9jm-Dp9PfHdDDylLCQ 提取码: y9jt\n\n其中db目录存放ruoyi数据库脚本\n其中jar目录存放打包好的jar应用文件\n其中conf目录存放redis.conf和nginx.conf配置\n其中html\\dist目录存放打包好的静态页面文件\n数据库mysql地址需要修改成ruoyi-mysql\n缓存redis地址需要修改成ruoyi-redis\n数据库脚本头部需要添加SET NAMES 'utf8';（防止乱码）\n\n5、启动docker\n\nsystemctl start docker\n\n1\n\n\n6、构建docker服务\n\ndocker-compose build\n\n1\n\n\n7、启动docker容器\n\ndocker-compose up -d\n\n1\n\n\n8、访问应用地址\n\n打开浏览器，输入：(http://localhost:80 \n(opens new window)\n)，若能正确展示页面，则表明环境搭建成功。\n\n启动服务的容器docker-compose up ruoyi-mysql ruoyi-server ruoyi-nginx ruoyi-redis\n\n停止服务的容器docker-compose stop ruoyi-mysql ruoyi-server ruoyi-nginx ruoyi-redis\n\n时区设置\n\n如果服务器的时区不正确，可以在dockerfile文件中添加ENV TZ=Asia/Shanghai\n\n#\n升级springboot到最新版本3.x\n\nSpring Boot 3.x要求使用Java 17或更高版本，所以需要确保项目使用的Java版本符合要求。\n\n1、修改pom.xml文件，version版本根据实际情况配置最新。\n\n<!-- java.version版本8更换为17 -->\n<java.version>17</java.version>\n\n<!-- 新增mybatis节点，版本为3.0.2 -->\n<mybatis-spring-boot.version>3.0.2</mybatis-spring-boot.version>\n\n<!-- spring-boot版本2.5.15更换为3.1.5 -->\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-dependencies</artifactId>\n\t<version>3.1.5</version>\n\t<type>pom</type>\n\t<scope>import</scope>\n</dependency>\n\n<!-- 新增四个配置依赖 -->\n<dependency>\n\t<groupId>org.mybatis.spring.boot</groupId>\n\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t<version>${mybatis-spring-boot.version}</version>\n</dependency>\n\n<dependency>\n\t<groupId>com.mysql</groupId>\n\t<artifactId>mysql-connector-j</artifactId>\n\t<version>8.1.0</version>\n</dependency>\n\n<dependency>\n\t<groupId>javax.xml.bind</groupId>\n\t<artifactId>jaxb-api</artifactId>\n\t<version>2.3.1</version>\n</dependency>\n\n<dependency>\n\t<groupId>jakarta.servlet</groupId>\n\t<artifactId>jakarta.servlet-api</artifactId>\n\t<version>6.0.0</version>\n</dependency>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n2、修改ruoyi-admin/pom.xml文件mysql依赖。\n\n\n\n\n \n \n\n\n\n<!-- Mysql驱动包 -->\n<dependency>\n\t<groupId>com.mysql</groupId>\n\t<artifactId>mysql-connector-j</artifactId>\n</dependency>\n\n1\n2\n3\n4\n5\n\n\n3、修改ruoyi-framework/pom.xml文件kaptcha依赖。\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n<!-- 验证码 -->\n<dependency>\n\t<groupId>pro.fessional</groupId>\n\t<artifactId>kaptcha</artifactId>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<artifactId>servlet-api</artifactId>\n\t\t\t<groupId>jakarta.servlet</groupId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n4、修改ruoyi-common/pom.xml文件servlet依赖为jakarta。\n\n<!-- servlet包 -->\n<dependency>\n\t<groupId>jakarta.servlet</groupId>\n\t<artifactId>jakarta.servlet-api</artifactId>\n</dependency>\n\n1\n2\n3\n4\n5\n\n\n5、Java EE转Jakarta EE\nSpring Boot 3.0将所有底层依赖项从Java EE迁移到了Jakarta EE，会对一些使用了Java EE的方法造成影响，需要进行相应的修改和调整。\n\n将javax.xxxx替换成jakarta.xxxx，例如\n\njavax.annotation 替换成 jakarta.validation\njavax.servlet    替换成 jakarta.servlet\njavax.validation 替换成 jakarta.validation\njavax.xxxxxxxxxx 替换成 jakarta.xxxxxxxxxx\n\n1\n2\n3\n4\n\n\n注意代码生成模板controller.java.vm也需要换一下javax为jakarta。\n\n但是有些原生方法是不需要去进行修改的，例如项目中的这几个方法，包不需要替换成jakarta.xxxx\n\nimport javax.imageio.ImageIO;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport javax.sql.DataSource\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nPS：如果嫌麻烦可以使用idea自带的转换功能\n\n6、修改DruidConfig.java，添加数据库监听功能配置Bean。\n\n\n\n\n\n\n\n\n \n \n \n \n \n\n\n\n\n\npackage com.ruoyi.framework.config;\n\npublic class DruidConfig\n{\n    .......\n\n    @Bean\n    public DruidStatProperties druidStatProperties()\n    {\n        return new DruidStatProperties();\n    }\n\n    .......\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n7、修改PermitAllUrlProperties.java，以支持@Anonymous注解path_pattern_parser解析方式。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n \n\n\n\n\n\n\n\n\npackage com.ruoyi.framework.config.properties;\n\n@Configuration\npublic class PermitAllUrlProperties implements InitializingBean, ApplicationContextAware\n{\n    .........\n\n    @Override\n    public void afterPropertiesSet()\n    {\n        RequestMappingHandlerMapping mapping = applicationContext.getBean(RequestMappingHandlerMapping.class);\n        Map<RequestMappingInfo, HandlerMethod> map = mapping.getHandlerMethods();\n\n        map.keySet().forEach(info -> {\n            HandlerMethod handlerMethod = map.get(info);\n\n            // 获取方法上边的注解 替代path variable 为 *\n            Anonymous method = AnnotationUtils.findAnnotation(handlerMethod.getMethod(), Anonymous.class);\n            Optional.ofNullable(method).ifPresent(anonymous -> Objects.requireNonNull(info.getPathPatternsCondition().getPatternValues()) //\n                    .forEach(url -> urls.add(RegExUtils.replaceAll(url, PATTERN, ASTERISK))));\n\n            // 获取类上边的注解, 替代path variable 为 *\n            Anonymous controller = AnnotationUtils.findAnnotation(handlerMethod.getBeanType(), Anonymous.class);\n            Optional.ofNullable(controller).ifPresent(anonymous -> Objects.requireNonNull(info.getPathPatternsCondition().getPatternValues())\n                    .forEach(url -> urls.add(RegExUtils.replaceAll(url, PATTERN, ASTERISK))));\n        });\n    }\n\n    .........\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n8、修改SecurityConfig.java，以支持Spring Security6新的配置方式。\n\npackage com.ruoyi.framework.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\nimport org.springframework.web.filter.CorsFilter;\nimport com.ruoyi.framework.config.properties.PermitAllUrlProperties;\nimport com.ruoyi.framework.security.filter.JwtAuthenticationTokenFilter;\nimport com.ruoyi.framework.security.handle.AuthenticationEntryPointImpl;\nimport com.ruoyi.framework.security.handle.LogoutSuccessHandlerImpl;\n\n/**\n * spring security配置\n *\n * @author ruoyi\n */\n@EnableMethodSecurity(prePostEnabled = true, securedEnabled = true)\n@Configuration\npublic class SecurityConfig\n{\n    /**\n     * 自定义用户认证逻辑\n     */\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    /**\n     * 认证失败处理类\n     */\n    @Autowired\n    private AuthenticationEntryPointImpl unauthorizedHandler;\n\n    /**\n     * 退出处理类\n     */\n    @Autowired\n    private LogoutSuccessHandlerImpl logoutSuccessHandler;\n\n    /**\n     * token认证过滤器\n     */\n    @Autowired\n    private JwtAuthenticationTokenFilter authenticationTokenFilter;\n\n    /**\n     * 跨域过滤器\n     */\n    @Autowired\n    private CorsFilter corsFilter;\n\n    /**\n     * 允许匿名访问的地址\n     */\n    @Autowired\n    private PermitAllUrlProperties permitAllUrl;\n\n    /**\n     * @return\n     * @throws Exception\n     */\n    @Bean\n    AuthenticationManager authenticationManager()\n    {\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        // 身份认证接口\n        daoAuthenticationProvider.setUserDetailsService(userDetailsService);\n        daoAuthenticationProvider.setPasswordEncoder(bCryptPasswordEncoder());\n        return new ProviderManager(daoAuthenticationProvider);\n    }\n\n    /**\n     * anyRequest | 匹配所有请求路径\n     * access | SpringEl表达式结果为true时可以访问\n     * anonymous | 匿名可以访问\n     * denyAll | 用户不能访问\n     * fullyAuthenticated | 用户完全认证可以访问（非remember-me下自动登录）\n     * hasAnyAuthority | 如果有参数，参数表示权限，则其中任何一个权限可以访问\n     * hasAnyRole | 如果有参数，参数表示角色，则其中任何一个角色可以访问\n     * hasAuthority | 如果有参数，参数表示权限，则其权限可以访问\n     * hasIpAddress | 如果有参数，参数表示IP地址，如果用户IP和参数匹配，则可以访问\n     * hasRole | 如果有参数，参数表示角色，则其角色可以访问\n     * permitAll | 用户可以任意访问\n     * rememberMe | 允许通过remember-me登录的用户访问\n     * authenticated | 用户登录后可访问\n     */\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception\n    {\n        return httpSecurity\n                // CSRF禁用，因为不使用session\n                .csrf(csrf -> csrf.disable())\n                // 禁用HTTP响应标头\n                .headers(headersCustomizer -> headersCustomizer.cacheControl().disable())\n                // 认证失败处理类\n                .exceptionHandling(exception -> exception.authenticationEntryPoint(unauthorizedHandler))\n                // 基于token，所以不需要session\n                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n                .headers(headers -> headers.cacheControl().disable())\n                // 注解标记允许匿名访问的url\n                .authorizeHttpRequests((requests) -> {\n                    permitAllUrl.getUrls().forEach(url -> requests.requestMatchers(url).permitAll());\n                    // 对于登录login 注册register 验证码captchaImage 允许匿名访问\n                    requests.requestMatchers(\"/login\", \"/register\", \"/captchaImage\").permitAll()\n                            // 静态资源，可匿名访问\n                            .requestMatchers(HttpMethod.GET, \"/\", \"/*.html\", \"/**.html\", \"/**.css\", \"/**.js\", \"/profile/**\").permitAll()\n                            .requestMatchers(\"/swagger-ui.html\", \"/swagger-resources/**\", \"/webjars/**\", \"/*/api-docs\", \"/*/api-docs/**\", \"/druid/**\").permitAll()\n                            // 除上面外的所有请求全部需要鉴权认证\n                            .anyRequest().authenticated();\n                })\n                // 添加Logout filter\n                .logout(logout -> logout.logoutUrl(\"/logout\").logoutSuccessHandler(logoutSuccessHandler))\n                // 添加JWT filter\n                .addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class)\n                // 添加CORS filter\n                .addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class)\n                .addFilterBefore(corsFilter, LogoutFilter.class).build();\n    }\n\n    /**\n     * 强散列哈希加密实现\n     */\n    @Bean\n    public BCryptPasswordEncoder bCryptPasswordEncoder()\n    {\n        return new BCryptPasswordEncoder();\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n\n\n9、到此就对springboot3做了全部的兼容，提供全部改后代码供大家参考。\n\n提示\n\n插件相关包和代码实现ruoyi-vue/升级springboot到最新版本3.x.zip\n\n链接: https://pan.baidu.com/s/13JVC9jm-Dp9PfHdDDylLCQ 提取码: y9jt\n\n#\n集成ehcache实现本地缓存切换\n\n目前的会话信息通过redis存储在服务器，可以很方便集群会话管理，但有些项目不大，就不想要去启动redis服务，就可以通过ehcache存储在本地。\n\n1、pom.xml文件添加spring-cache依赖。\n\n<!-- SpringCache的依赖配置 -->\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-cache</artifactId>\n\t<version>2.5.15</version>\n</dependency>\n\n1\n2\n3\n4\n5\n6\n\n\n2、ruoyi-common/pom.xml文件添加spring-cache和ehcache依赖。\n\n<!-- SpringCache的依赖配置 -->\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-cache</artifactId>\n</dependency>\n\n<!-- Ehcache缓存管理器 -->\n<dependency>\n\t<groupId>net.sf.ehcache</groupId>\n\t<artifactId>ehcache</artifactId>\n</dependency>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n3、ruoyi-admin文件application.yml，添加cache配置\n\nspring:\n  cache:\n    # 指定缓存类型 ehcache 本地缓存 redis 缓存\n    type: ehcache\n    ehcache:\n      config: classpath:ehcache.xml\n    redis:\n      # 指定存活时间（ms）\n      time-to-live: 86400000\n      # 指定前缀\n      use-key-prefix: true\n      # 是否缓存空值，可以防止缓存穿透\n      cache-null-values: true\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n4、下载插件相关包和代码实现覆盖到工程中\n\n提示\n\n插件相关包和代码实现ruoyi-vue/集成ehcache实现本地缓存切换.zip\n\n链接: https://pan.baidu.com/s/13JVC9jm-Dp9PfHdDDylLCQ 提取码: y9jt\n\n5、测试验证\n\n关闭redis服务，启动ruoyi项目，测试登录和其他操作，如果想切换为redis，可以将类型type: ehcache设置为type: redis即可。\n\n#\n集成websocket实现实时通信\n\nWebSocket是一种通信协议，可在单个TCP连接上进行全双工通信。WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以建立持久性的连接，并进行双向数据传输。\n\n1、ruoyi-framework/pom.xml文件添加websocket依赖。\n\n<!-- SpringBoot Websocket -->\n<dependency>  \n   <groupId>org.springframework.boot</groupId>  \n   <artifactId>spring-boot-starter-websocket</artifactId>  \n</dependency>\n\n1\n2\n3\n4\n5\n\n\n2、配置匿名访问（可选）\n\n// 如果需要不登录也可以访问，需要在`SecurityConfig.java`中设置匿名访问\n(\"/websocket/**\").permitAll()\n\n1\n2\n\n\n3、下载插件相关包和代码实现覆盖到工程中\n\n提示\n\n插件相关包和代码实现ruoyi-vue/集成websocket实现实时通信.zip\n\n链接: https://pan.baidu.com/s/13JVC9jm-Dp9PfHdDDylLCQ 提取码: y9jt\n\n4、测试验证\n\n如果要测试验证可以把websocket.vue内容复制到login.vue，点击连接发送消息测试返回结果。\n\n#\n集成electron实现桌面应用程序\n\n1、修改package.json文件，加入相关依赖和配置\n\n\n\n\n\n\n\n\n \n\n\n\n \n \n \n\n\n\n\n\n\n \n \n \n\n\n\n\n\n \n\n\n\n\n\n\n{\n  \"name\": \"ruoyi\",\n  \"version\": \"3.8.6\",\n  \"description\": \"若依管理系统\",\n  \"author\": \"若依\",\n  \"license\": \"MIT\",\n  \"main\": \"background.js\",\n  \"scripts\": {\n    ....\n    \"electron:serve\": \"vue-cli-service electron:serve\",\n    \"electron:build\": \"vue-cli-service electron:build\",\n    \"electron:build:win32\": \"vue-cli-service electron:build --win --ia32\",\n    ....\n  },\n  ....\n  \"dependencies\": {\n    \"....\n    \"electron-devtools-installer\": \"3.2.0\",\n    \"electron-store\": \"8.1.0\",\n    \"vue-cli-plugin-electron-builder\": \"2.1.1\",\n    ....\n  },\n  \"devDependencies\": {\n    ....\n    \"electron\": \"26.2.0\",\n    ....\n  },\n  ....\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n2、配置后端接口地址 修改.env.production文件VUE_APP_BASE_API属性\n\n# 你自己的后端接口地址\nVUE_APP_BASE_API = 'https://vue.ruoyi.vip/prod-api'\n\n1\n2\n\n\n3、在ruoyi-ui/src下新建background.js文件\n\n'use strict'\n\nimport { app, protocol, BrowserWindow } from 'electron'\nimport { createProtocol } from 'vue-cli-plugin-electron-builder/lib'\nimport installExtension, { VUEJS_DEVTOOLS } from 'electron-devtools-installer'\nconst isDevelopment = process.env.NODE_ENV !== 'production'\nconst additionalData = { myKey: 'myValue' }\nlet myWindow = null\n// Scheme must be registered before the app is ready\nprotocol.registerSchemesAsPrivileged([\n  { scheme: 'app', privileges: { secure: true, standard: true } }\n])\n\nasync function createWindow() {\n  // Create the browser window.\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      // Use pluginOptions.nodeIntegration, leave this alone\n      // See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info\n      nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION,\n      contextIsolation: !process.env.ELECTRON_NODE_INTEGRATION\n    }\n  })\n\n  if (process.env.WEBPACK_DEV_SERVER_URL) {\n    // Load the url of the dev server if in development mode\n    await win.loadURL(process.env.WEBPACK_DEV_SERVER_URL)\n    if (!process.env.IS_TEST) win.webContents.openDevTools()\n  } else {\n    createProtocol('app')\n    // Load the index.html when not in development\n    win.loadURL('app://./index.html')\n  }\n}\n\nconst gotTheLock = app.requestSingleInstanceLock(additionalData)\nif (!gotTheLock) {\n  app.quit()\n} else {\n  app.on('second-instance', (event, commandLine, workingDirectory, additionalData) => {\n    if (myWindow) {\n      if (myWindow.isMinimized()) myWindow.restore()\n      myWindow.focus()\n    }\n  })\n\n  // Quit when all windows are closed.\n  app.on('window-all-closed', () => {\n    // On macOS it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if (process.platform !== 'darwin') {\n      app.quit()\n    }\n  })\n\n  app.on('activate', () => {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n\n  // This method will be called when Electron has finished\n  // initialization and is ready to create browser windows.\n  // Some APIs can only be used after this event occurs.\n  app.on('ready', async () => {\n    if (isDevelopment && !process.env.IS_TEST) {\n      // Install Vue Devtools\n      try {\n        await installExtension(VUEJS_DEVTOOLS)\n      } catch (e) {\n        console.error('Vue Devtools failed to install:', e.toString())\n      }\n    }\n    createWindow()\n  })\n\n  // Exit cleanly on request from parent process in development mode.\n  if (isDevelopment) {\n    if (process.platform === 'win32') {\n      process.on('message', (data) => {\n        if (data === 'graceful-exit') {\n          app.quit()\n        }\n      })\n    } else {\n      process.on('SIGTERM', () => {\n        app.quit()\n      })\n    }\n  }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n\n\n4、调整部分代码，以便支持electron应用 修改layout/components/Navbar.vue和utils/request.js，把location.href = '/index'换成this.$router.push('/login')\n\n\n\n \n\n\n\nthis.$store.dispatch('LogOut').then(() => {\n    this.$router.push('/login');\n})\n\n1\n2\n3\n\n\n修改router/index.js，把mode: history换成mode: 'hash'\n\n\n\n \n\n\n\n\nexport default new Router({\n  mode: 'hash',\n  ...\n})\n\n1\n2\n3\n4\n\n\n5、将项目中使用到的cookie替换成localstorage\n\n参考使用localstorage代替cookie\n\n6、使用npm install命令安装依赖\n\nnpm install --registry=https://registry.npmmirror.com\n\n1\n\n\n7、使用npm run electron:build命令进行打包\n\nnpm run electron:build\n\n1\n\n\n打包成功后会在dist_electron中生成了exe文件，点击安装即可。\n\n如果安装失败，可以配置镜像地址后使用cnpm尝试单独安装electron相关依赖\n\n# 配置electron镜像地址\nnpm config set registry http://registry.npm.taobao.org/\nnpm config set electron_mirror=\"https://npm.taobao.org/mirrors/electron/\"\nnpm config set electron_builder_binaries_mirror=\"http://npm.taobao.org/mirrors/electron-builder-binaries/\"\n\n# 安装 electron\ncnpm install electron --save-dev\n\n# 安装 electron 管理开发者工具\ncnpm install electron-devtools-installer\n\n# 安装 electron 持久化数据存储库\ncnpm install electron-store\n\n# 安装 electron 打包和构建\ncnpm install vue-cli-plugin-electron-builder\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n#\n集成atomikos实现分布式事务\n\n参考集成atomikos实现分布式事务\n\n#\n集成minio实现分布式文件存储\n\n框架默认存储使用的本地磁盘，对于一些文件较大较多且有数据备份、数据安全、分布式等等就满足不了我们的要求，对于这种情况我们可以集成OSS对象存储服务。 minio是目前github上star最多的数据存储框架。minio可以用来搭建分布式存储服务，可以很好的和机器学习相结合。\n\n1、ruoyi-common/pom.xml文件添加minio依赖。\n\n<!-- Minio 文件存储 -->\n<dependency>\n\t<groupId>io.minio</groupId>\n\t<artifactId>minio</artifactId>\n\t<version>8.2.1</version>\n</dependency>\n\n1\n2\n3\n4\n5\n6\n\n\n2、ruoyi-admin文件application.yml，添加minio配置\n\n# Minio配置\nminio:\n  url: http://localhost:9000\n  accessKey: minioadmin\n  secretKey: minioadmin\n  bucketName: ruoyi\n\n1\n2\n3\n4\n5\n6\n\n\n3、CommonController.java自定义Minio服务器上传请求\n\n/**\n * 自定义 Minio 服务器上传请求\n */\n@PostMapping(\"/uploadMinio\")\npublic AjaxResult uploadFileMinio(MultipartFile file) throws Exception\n{\n\ttry\n\t{\n\t\t// 上传并返回新文件名称\n\t\tString fileName = FileUploadUtils.uploadMinio(file);\n\t\tAjaxResult ajax = AjaxResult.success();\n\t\tajax.put(\"url\", fileName);\n\t\tajax.put(\"fileName\", fileName);\n\t\tajax.put(\"newFileName\", FileUtils.getName(fileName));\n\t\tajax.put(\"originalFilename\", file.getOriginalFilename());\n\t\treturn ajax;\n\t}\n\tcatch (Exception e)\n\t{\n\t\treturn AjaxResult.error(e.getMessage());\n\t}\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n4、下载插件相关包和代码实现覆盖到工程中\n\n提示\n\n插件相关包和代码实现ruoyi/集成minio实现分布式文件存储.zip\n\n链接: https://pan.baidu.com/s/13JVC9jm-Dp9PfHdDDylLCQ 提取码: y9jt\n\n5、测试验证文件存储的功能\n\n代码测试可以将自己的FileUploadUtils.upload修改为FileUploadUtils.uploadMinio，返回值为文件的url路径。\n\n页面测试可以修改组件src/components/xxxxxx的文件上传的路径common/upload修改为common/uploadMinio，然后去掉多余的代理路径baseUrl在上传测试验证结果。\n\n#\n使用localstorage代替cookie\n\n使用localstorage代替cookie\n\n#\n使用undertow来替代tomcat容器\n\n参考使用undertow来替代tomcat容器\n\n#\n集成actuator实现优雅关闭应用\n\n优雅停机主要应用在版本更新的时候，为了等待正在工作的线程全部执行完毕，然后再停止。我们可以使用SpringBoot提供的Actuator\n\n1、pom.xml中引入actuator依赖\n\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n1\n2\n3\n4\n\n\n2、配置文件中endpoint开启shutdown\n\nmanagement:\n  endpoint:\n    shutdown:\n      enabled: true\n  endpoints:\n    web:\n      exposure:\n        include: \"shutdown\"\n      base-path: /monitor\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n3、在SecurityConfig中设置httpSecurity配置匿名访问\n\n.antMatchers(\"/monitor/shutdown\").anonymous()\n\n1\n\n\n4、Post请求测试验证优雅停机 curl -X POST http://localhost:8080/monitor/shutdown\n\n#\n集成aj-captcha实现滑块验证码\n\n集成以AJ-Captcha滑块验证码为例，不需要键盘手动输入，极大优化了传统验证码用户体验不佳的问题。目前对外提供两种类型的验证码，其中包含滑动拼图、文字点选。\n\n1、ruoyi-framework\\pom.xml添加依赖\n\n<!-- 滑块验证码  -->\n<dependency>\n\t<groupId>com.github.anji-plus</groupId>\n\t<artifactId>captcha-spring-boot-starter</artifactId>\n\t<version>1.2.7</version>\n</dependency>\n\n<!-- 原有的验证码kaptcha依赖不需要可以删除  -->\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n2、修改application.yml，加入aj-captcha配置\n\n# 滑块验证码\naj:\n   captcha:\n      # 缓存类型\n      cache-type: redis\n      # blockPuzzle 滑块 clickWord 文字点选  default默认两者都实例化\n      type: blockPuzzle\n      # 右下角显示字\n      water-mark: ruoyi.vip\n      # 校验滑动拼图允许误差偏移量(默认5像素)\n      slip-offset: 5\n      # aes加密坐标开启或者禁用(true|false)\n      aes-status: true\n      # 滑动干扰项(0/1/2)\n      interference-options: 2\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n同时在ruoyi-admin\\src\\main\\resources\\META-INF\\services下创建com.anji.captcha.service.CaptchaCacheService文件同时设置文件内容为\n\ncom.ruoyi.framework.web.service.CaptchaRedisService\n\n1\n\n\n3、在SecurityConfig中设置httpSecurity配置匿名访问\n\n.antMatchers(\"/login\", \"/captcha/get\", \"/captcha/check\").permitAll()\n\n1\n\n\n4、修改相关类\n\n移除原先不需要的类\n\nruoyi-admin\\com\\ruoyi\\web\\controller\\common\\CaptchaController.java\nruoyi-framework\\com\\ruoyi\\framework\\config\\CaptchaConfig.java\nruoyi-framework\\com\\ruoyi\\framework\\config\\KaptchaTextCreator.java\n\n修改ruoyi-admin\\com\\ruoyi\\web\\controller\\system\\SysLoginController.java\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n/**\n * 登录方法\n * \n * @param loginBody 登录信息\n * @return 结果\n */\n@PostMapping(\"/login\")\npublic AjaxResult login(@RequestBody LoginBody loginBody)\n{\n\tAjaxResult ajax = AjaxResult.success();\n\t// 生成令牌\n\tString token = loginService.login(loginBody.getUsername(), loginBody.getPassword(), loginBody.getCode());\n\tajax.put(Constants.TOKEN, token);\n\treturn ajax;\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n修改ruoyi-framework\\com\\ruoyi\\framework\\web\\service\\SysLoginService.java\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n \n \n \n \n \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npackage com.ruoyi.framework.web.service;\n\nimport javax.annotation.Resource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.stereotype.Component;\nimport com.anji.captcha.model.common.ResponseModel;\nimport com.anji.captcha.model.vo.CaptchaVO;\nimport com.anji.captcha.service.CaptchaService;\nimport com.ruoyi.common.constant.Constants;\nimport com.ruoyi.common.core.domain.entity.SysUser;\nimport com.ruoyi.common.core.domain.model.LoginUser;\nimport com.ruoyi.common.exception.ServiceException;\nimport com.ruoyi.common.exception.user.CaptchaException;\nimport com.ruoyi.common.exception.user.UserPasswordNotMatchException;\nimport com.ruoyi.common.utils.DateUtils;\nimport com.ruoyi.common.utils.MessageUtils;\nimport com.ruoyi.common.utils.ServletUtils;\nimport com.ruoyi.common.utils.ip.IpUtils;\nimport com.ruoyi.framework.manager.AsyncManager;\nimport com.ruoyi.framework.manager.factory.AsyncFactory;\nimport com.ruoyi.framework.security.context.AuthenticationContextHolder;\nimport com.ruoyi.system.service.ISysUserService;\n\n/**\n * 登录校验方法\n * \n * @author ruoyi\n */\n@Component\npublic class SysLoginService\n{\n    @Autowired\n    private TokenService tokenService;\n\n    @Resource\n    private AuthenticationManager authenticationManager;\n\n    @Autowired\n    private ISysUserService userService;\n\n    @Autowired\n    @Lazy\n    private CaptchaService captchaService;\n\n    /**\n     * 登录验证\n     * \n     * @param username 用户名\n     * @param password 密码\n     * @param code 验证码\n     * @return 结果\n     */\n    public String login(String username, String password, String code)\n    {\n        CaptchaVO captchaVO = new CaptchaVO();\n        captchaVO.setCaptchaVerification(code);\n        ResponseModel response = captchaService.verification(captchaVO);\n        if (!response.isSuccess())\n        {\n            AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(\"user.jcaptcha.error\")));\n            throw new CaptchaException();\n        }\n        // 用户验证\n        Authentication authentication = null;\n        try\n        {\n            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(username, password);\n            AuthenticationContextHolder.setContext(authenticationToken);\n            // 该方法会去调用UserDetailsServiceImpl.loadUserByUsername\n            authentication = authenticationManager.authenticate(authenticationToken);\n        }\n        catch (Exception e)\n        {\n            if (e instanceof BadCredentialsException)\n            {\n                AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(\"user.password.not.match\")));\n                throw new UserPasswordNotMatchException();\n            }\n            else\n            {\n                AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, e.getMessage()));\n                throw new ServiceException(e.getMessage());\n            }\n        }\n        finally\n        {\n            AuthenticationContextHolder.clearContext();\n        }\n        AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_SUCCESS, MessageUtils.message(\"user.login.success\")));\n        LoginUser loginUser = (LoginUser) authentication.getPrincipal();\n        recordLoginInfo(loginUser.getUserId());\n        // 生成token\n        return tokenService.createToken(loginUser);\n    }\n\n    /**\n     * 记录登录信息\n     *\n     * @param userId 用户ID\n     */\n    public void recordLoginInfo(Long userId)\n    {\n        SysUser sysUser = new SysUser();\n        sysUser.setUserId(userId);\n        sysUser.setLoginIp(IpUtils.getIpAddr(ServletUtils.getRequest()));\n        sysUser.setLoginDate(DateUtils.getNowDate());\n        userService.updateUserProfile(sysUser);\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n\n\n新增 ruoyi-framework\\com\\ruoyi\\framework\\web\\service\\CaptchaRedisService.java\n\npackage com.ruoyi.framework.web.service;\n\nimport java.util.concurrent.TimeUnit;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport com.anji.captcha.service.CaptchaCacheService;\n\n/**\n * 自定义redis验证码缓存实现类\n * \n * @author ruoyi\n */\npublic class CaptchaRedisService implements CaptchaCacheService\n{\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    @Override\n    public void set(String key, String value, long expiresInSeconds)\n    {\n        stringRedisTemplate.opsForValue().set(key, value, expiresInSeconds, TimeUnit.SECONDS);\n    }\n\n    @Override\n    public boolean exists(String key)\n    {\n        return stringRedisTemplate.hasKey(key);\n    }\n\n    @Override\n    public void delete(String key)\n    {\n        stringRedisTemplate.delete(key);\n    }\n\n    @Override\n    public String get(String key)\n    {\n        return stringRedisTemplate.opsForValue().get(key);\n    }\n\n    @Override\n    public Long increment(String key, long val)\n    {\n        return stringRedisTemplate.opsForValue().increment(key, val);\n    }\n\n    @Override\n    public String type()\n    {\n        return \"redis\";\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n5、添加滑动验证码插件到ruoyi-ui\n\n下载前端插件相关包和代码实现ruoyi-vue/集成滑动验证码.zip\n\n链接: https://pan.baidu.com/s/13JVC9jm-Dp9PfHdDDylLCQ 提取码: y9jt\n\n#\n集成sharding-jdbc实现分库分表\n\n参考集成sharding-jdbc实现分库分表\n\n#\n集成just-auth实现第三方授权登录\n\n对于一些想使用第三方平台授权登录可以使用JustAuth，支持Github、Gitee、微博、钉钉、百度、Coding、腾讯云开发者平台、OSChina、支付宝、QQ、微信、淘宝、Google、Facebook、抖音、领英、小米、微软、今日头条、Teambition、StackOverflow、Pinterest、人人、华为、企业微信、酷家乐、Gitlab、美团、饿了么和推特等第三方平台的授权登录。\n\n1、ruoyi-common\\pom.xml模块添加整合依赖\n\n<!-- 第三方授权登录 -->\n<dependency>\n\t<groupId>me.zhyd.oauth</groupId>\n\t<artifactId>JustAuth</artifactId>\n\t<version>1.15.6</version>\n</dependency>\n\n<!-- HttpClient -->\n<dependency>\n\t<groupId>org.apache.httpcomponents</groupId>\n\t<artifactId>httpclient</artifactId>\n</dependency>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n2、新建第三方登录授权表\n\n-- ----------------------------\n-- 第三方授权表\n-- ----------------------------\nDROP TABLE IF EXISTS sys_auth_user;\nCREATE TABLE sys_auth_user (\n  auth_id           BIGINT(20)      NOT NULL AUTO_INCREMENT    COMMENT '授权ID',\n  uuid              VARCHAR(500)    NOT NULL                   COMMENT '第三方平台用户唯一ID',\n  user_id           BIGINT(20)      NOT NULL                   COMMENT '系统用户ID',\n  user_name         VARCHAR(30)     NOT NULL                   COMMENT '登录账号',\n  nick_name         VARCHAR(30)     DEFAULT ''                 COMMENT '用户昵称',\n  avatar            VARCHAR(500)    DEFAULT ''                 COMMENT '头像地址',\n  email             VARCHAR(255)    DEFAULT ''                 COMMENT '用户邮箱',\n  source            VARCHAR(255)    DEFAULT ''                 COMMENT '用户来源',\n  create_time       DATETIME                                   COMMENT '创建时间',\n  PRIMARY KEY (auth_id)\n) ENGINE=INNODB AUTO_INCREMENT=100 COMMENT = '第三方授权表';\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n3、下载插件相关包和代码实现覆盖到工程中\n\n提示\n\n下载前端插件相关包和代码实现ruoyi-vue/集成JustAuth实现第三方授权登录.zip\n\n链接: https://pan.baidu.com/s/13JVC9jm-Dp9PfHdDDylLCQ 提取码: y9jt\n\n4、测试登录页面第三方授权登录，个人中心授权及取消功能是否正常使用。\n\n#\n集成watermark实现页面添加水印\n\n在网站浏览中，常常需要网页水印，以便防止用户截图或录屏暴露敏感信息后，方便追踪用户来源。\n\n1、在package.json文件dependencies节点增加watermark-dom依赖。\n\n\"watermark-dom\": \"2.3.0\"\n\n1\n\n\n2、在AppMain.vue文件引入水印模块，示例如下：\n\nimport watermark from \"watermark-dom\";\n\nexport default {\n  name: \"AppMain\",\n  mounted() {\n    // 加载水印\n    const username = this.$store.state.user.name;\n    watermark.load({ watermark_txt: username + \"水印\" });\n  },\n  computed: {\n    .....\n  }\n};\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n3、访问页面，检查页面水印是否显示。\n\n注意\n\n如需Excel导出时添加水印参考 - 参考如何Excel导出时添加水印\n\n#\n集成mybatisplus实现mybatis增强\n\nMybatis-Plus是在Mybatis的基础上进行扩展，只做增强不做改变，可以兼容Mybatis原生的特性。同时支持通用CRUD操作、多种主键策略、分页、性能分析、全局拦截等。极大帮助我们简化开发工作。\n\nRuoYi-Vue集成Mybatis-Plus完整项目参考https://gitee.com/JavaLionLi/RuoYi-Vue-Plus \n(opens new window)\n。\n\n1、ruoyi-common\\pom.xml模块添加整合依赖\n\n<!-- mybatis-plus 增强CRUD -->\n<dependency>\n\t<groupId>com.baomidou</groupId>\n\t<artifactId>mybatis-plus-boot-starter</artifactId>\n\t<version>3.4.1</version>\n</dependency>\n\n1\n2\n3\n4\n5\n6\n\n\n2、ruoyi-admin文件application.yml，修改mybatis配置为mybatis-plus\n\n# MyBatis Plus配置\nmybatis-plus:\n  # 搜索指定包别名\n  typeAliasesPackage: com.ruoyi.**.domain\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\n  # 加载全局的配置文件\n  configLocation: classpath:mybatis/mybatis-config.xml\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n3、添加Mybatis Plus配置MybatisPlusConfig.java。 PS：原来的MyBatisConfig.java需要删除掉\n\npackage com.ruoyi.framework.config;\n\nimport com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.BlockAttackInnerInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.OptimisticLockerInnerInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\n/**\n * Mybatis Plus 配置\n * \n * @author ruoyi\n */\n@EnableTransactionManagement(proxyTargetClass = true)\n@Configuration\npublic class MybatisPlusConfig\n{\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor()\n    {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        // 分页插件\n        interceptor.addInnerInterceptor(paginationInnerInterceptor());\n        // 乐观锁插件\n        interceptor.addInnerInterceptor(optimisticLockerInnerInterceptor());\n        // 阻断插件\n        interceptor.addInnerInterceptor(blockAttackInnerInterceptor());\n        return interceptor;\n    }\n\n    /**\n     * 分页插件，自动识别数据库类型 https://baomidou.com/guide/interceptor-pagination.html\n     */\n    public PaginationInnerInterceptor paginationInnerInterceptor()\n    {\n        PaginationInnerInterceptor paginationInnerInterceptor = new PaginationInnerInterceptor();\n        // 设置数据库类型为mysql\n        paginationInnerInterceptor.setDbType(DbType.MYSQL);\n        // 设置最大单页限制数量，默认 500 条，-1 不受限制\n        paginationInnerInterceptor.setMaxLimit(-1L);\n        return paginationInnerInterceptor;\n    }\n\n    /**\n     * 乐观锁插件 https://baomidou.com/guide/interceptor-optimistic-locker.html\n     */\n    public OptimisticLockerInnerInterceptor optimisticLockerInnerInterceptor()\n    {\n        return new OptimisticLockerInnerInterceptor();\n    }\n\n    /**\n     * 如果是对全表的删除或更新操作，就会终止该操作 https://baomidou.com/guide/interceptor-block-attack.html\n     */\n    public BlockAttackInnerInterceptor blockAttackInnerInterceptor()\n    {\n        return new BlockAttackInnerInterceptor();\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n\n\n4、添加测试表和菜单信息\n\ndrop table if exists sys_student;\ncreate table sys_student (\n  student_id           int(11)         auto_increment    comment '编号',\n  student_name         varchar(30)     default ''        comment '学生名称',\n  student_age          int(3)          default null      comment '年龄',\n  student_hobby        varchar(30)     default ''        comment '爱好（0代码 1音乐 2电影）',\n  student_sex          char(1)         default '0'       comment '性别（0男 1女 2未知）',\n  student_status       char(1)         default '0'       comment '状态（0正常 1停用）',\n  student_birthday     datetime                          comment '生日',\n  primary key (student_id)\n) engine=innodb auto_increment=1 comment = '学生信息表';\n\n-- 菜单 sql\ninsert into sys_menu (menu_name, parent_id, order_num, url, menu_type, visible, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues('学生信息', '3', '1', '/system/student', 'c', '0', 'system:student:view', '#', 'admin', sysdate(), '', null, '学生信息菜单');\n\n-- 按钮父菜单id\nselect @parentid := last_insert_id();\n\n-- 按钮 sql\ninsert into sys_menu (menu_name, parent_id, order_num, url, menu_type, visible, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues('学生信息查询', @parentid, '1',  '#',  'f', '0', 'system:student:list',         '#', 'admin', sysdate(), '', null, '');\n\ninsert into sys_menu (menu_name, parent_id, order_num, url, menu_type, visible, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues('学生信息新增', @parentid, '2',  '#',  'f', '0', 'system:student:add',          '#', 'admin', sysdate(), '', null, '');\n\ninsert into sys_menu (menu_name, parent_id, order_num, url, menu_type, visible, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues('学生信息修改', @parentid, '3',  '#',  'f', '0', 'system:student:edit',         '#', 'admin', sysdate(), '', null, '');\n\ninsert into sys_menu (menu_name, parent_id, order_num, url, menu_type, visible, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues('学生信息删除', @parentid, '4',  '#',  'f', '0', 'system:student:remove',       '#', 'admin', sysdate(), '', null, '');\n\ninsert into sys_menu (menu_name, parent_id, order_num, url, menu_type, visible, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues('学生信息导出', @parentid, '5',  '#',  'f', '0', 'system:student:export',       '#', 'admin', sysdate(), '', null, '');\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n5、新增测试代码验证 新增 ruoyi-system\\com\\ruoyi\\system\\controller\\SysStudentController.java\n\npackage com.ruoyi.web.controller.system;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport com.ruoyi.common.annotation.Log;\nimport com.ruoyi.common.core.controller.BaseController;\nimport com.ruoyi.common.core.domain.AjaxResult;\nimport com.ruoyi.common.core.page.TableDataInfo;\nimport com.ruoyi.common.enums.BusinessType;\nimport com.ruoyi.common.utils.poi.ExcelUtil;\nimport com.ruoyi.system.domain.SysStudent;\nimport com.ruoyi.system.service.ISysStudentService;\n\n/**\n * 学生信息Controller\n * \n * @author ruoyi\n */\n@RestController\n@RequestMapping(\"/system/student\")\npublic class SysStudentController extends BaseController\n{\n    @Autowired\n    private ISysStudentService sysStudentService;\n\n    /**\n     * 查询学生信息列表\n     */\n    @PreAuthorize(\"@ss.hasPermi('system:student:list')\")\n    @GetMapping(\"/list\")\n    public TableDataInfo list(SysStudent sysStudent)\n    {\n        startPage();\n        List<SysStudent> list = sysStudentService.queryList(sysStudent);\n        return getDataTable(list);\n    }\n\n    /**\n     * 导出学生信息列表\n     */\n    @PreAuthorize(\"@ss.hasPermi('system:student:export')\")\n    @Log(title = \"学生信息\", businessType = BusinessType.EXPORT)\n    @GetMapping(\"/export\")\n    public AjaxResult export(SysStudent sysStudent)\n    {\n        List<SysStudent> list = sysStudentService.queryList(sysStudent);\n        ExcelUtil<SysStudent> util = new ExcelUtil<SysStudent>(SysStudent.class);\n        return util.exportExcel(list, \"student\");\n    }\n\n    /**\n     * 获取学生信息详细信息\n     */\n    @PreAuthorize(\"@ss.hasPermi('system:student:query')\")\n    @GetMapping(value = \"/{studentId}\")\n    public AjaxResult getInfo(@PathVariable(\"studentId\") Long studentId)\n    {\n        return AjaxResult.success(sysStudentService.getById(studentId));\n    }\n\n    /**\n     * 新增学生信息\n     */\n    @PreAuthorize(\"@ss.hasPermi('system:student:add')\")\n    @Log(title = \"学生信息\", businessType = BusinessType.INSERT)\n    @PostMapping\n    public AjaxResult add(@RequestBody SysStudent sysStudent)\n    {\n        return toAjax(sysStudentService.save(sysStudent));\n    }\n\n    /**\n     * 修改学生信息\n     */\n    @PreAuthorize(\"@ss.hasPermi('system:student:edit')\")\n    @Log(title = \"学生信息\", businessType = BusinessType.UPDATE)\n    @PutMapping\n    public AjaxResult edit(@RequestBody SysStudent sysStudent)\n    {\n        return toAjax(sysStudentService.updateById(sysStudent));\n    }\n\n    /**\n     * 删除学生信息\n     */\n    @PreAuthorize(\"@ss.hasPermi('system:student:remove')\")\n    @Log(title = \"学生信息\", businessType = BusinessType.DELETE)\n    @DeleteMapping(\"/{studentIds}\")\n    public AjaxResult remove(@PathVariable Long[] studentIds)\n    {\n        return toAjax(sysStudentService.removeByIds(Arrays.asList(studentIds)));\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n\n\n新增 ruoyi-system\\com\\ruoyi\\system\\domain\\SysStudent.java\n\npackage com.ruoyi.system.domain;\n\nimport java.io.Serializable;\nimport java.util.Date;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\nimport org.apache.commons.lang3.builder.ToStringStyle;\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.ruoyi.common.annotation.Excel;\n\n/**\n * 学生信息对象 sys_student\n * \n * @author ruoyi\n */\n@TableName(value = \"sys_student\")\npublic class SysStudent implements Serializable\n{\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    /** 编号 */\n    @TableId(type = IdType.AUTO)\n    private Long studentId;\n\n    /** 学生名称 */\n    @Excel(name = \"学生名称\")\n    private String studentName;\n\n    /** 年龄 */\n    @Excel(name = \"年龄\")\n    private Integer studentAge;\n\n    /** 爱好（0代码 1音乐 2电影） */\n    @Excel(name = \"爱好\", readConverterExp = \"0=代码,1=音乐,2=电影\")\n    private String studentHobby;\n\n    /** 性别（0男 1女 2未知） */\n    @Excel(name = \"性别\", readConverterExp = \"0=男,1=女,2=未知\")\n    private String studentSex;\n\n    /** 状态（0正常 1停用） */\n    @Excel(name = \"状态\", readConverterExp = \"0=正常,1=停用\")\n    private String studentStatus;\n\n    /** 生日 */\n    @JsonFormat(pattern = \"yyyy-MM-dd\")\n    @Excel(name = \"生日\", width = 30, dateFormat = \"yyyy-MM-dd\")\n    private Date studentBirthday;\n\n    public void setStudentId(Long studentId) \n    {\n        this.studentId = studentId;\n    }\n\n    public Long getStudentId() \n    {\n        return studentId;\n    }\n    public void setStudentName(String studentName) \n    {\n        this.studentName = studentName;\n    }\n\n    public String getStudentName() \n    {\n        return studentName;\n    }\n    public void setStudentAge(Integer studentAge) \n    {\n        this.studentAge = studentAge;\n    }\n\n    public Integer getStudentAge() \n    {\n        return studentAge;\n    }\n    public void setStudentHobby(String studentHobby) \n    {\n        this.studentHobby = studentHobby;\n    }\n\n    public String getStudentHobby() \n    {\n        return studentHobby;\n    }\n    public void setStudentSex(String studentSex) \n    {\n        this.studentSex = studentSex;\n    }\n\n    public String getStudentSex() \n    {\n        return studentSex;\n    }\n    public void setStudentStatus(String studentStatus) \n    {\n        this.studentStatus = studentStatus;\n    }\n\n    public String getStudentStatus() \n    {\n        return studentStatus;\n    }\n    public void setStudentBirthday(Date studentBirthday) \n    {\n        this.studentBirthday = studentBirthday;\n    }\n\n    public Date getStudentBirthday() \n    {\n        return studentBirthday;\n    }\n\n    @Override\n    public String toString() {\n        return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)\n            .append(\"studentId\", getStudentId())\n            .append(\"studentName\", getStudentName())\n            .append(\"studentAge\", getStudentAge())\n            .append(\"studentHobby\", getStudentHobby())\n            .append(\"studentSex\", getStudentSex())\n            .append(\"studentStatus\", getStudentStatus())\n            .append(\"studentBirthday\", getStudentBirthday())\n            .toString();\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n\n\n新增 ruoyi-system\\com\\ruoyi\\system\\mapper\\SysStudentMapper.java\n\npackage com.ruoyi.system.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.ruoyi.system.domain.SysStudent;\n\n/**\n * 学生信息Mapper接口\n * \n * @author ruoyi\n */\npublic interface SysStudentMapper extends BaseMapper<SysStudent>\n{\n\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n新增 ruoyi-system\\com\\ruoyi\\system\\service\\ISysStudentService.java\n\npackage com.ruoyi.system.service;\n\nimport java.util.List;\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.ruoyi.system.domain.SysStudent;\n\n/**\n * 学生信息Service接口\n * \n * @author ruoyi\n */\npublic interface ISysStudentService extends IService<SysStudent>\n{\n    /**\n     * 查询学生信息列表\n     * \n     * @param sysStudent 学生信息\n     * @return 学生信息集合\n     */\n    public List<SysStudent> queryList(SysStudent sysStudent);\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n新增 ruoyi-system\\com\\ruoyi\\system\\service\\impl\\SysStudentServiceImpl.java\n\npackage com.ruoyi.system.service.impl;\n\nimport java.util.List;\nimport org.springframework.stereotype.Service;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.ruoyi.common.utils.StringUtils;\nimport com.ruoyi.system.domain.SysStudent;\nimport com.ruoyi.system.mapper.SysStudentMapper;\nimport com.ruoyi.system.service.ISysStudentService;\n\n/**\n * 学生信息Service业务层处理\n * \n * @author ruoyi\n */\n@Service\npublic class SysStudentServiceImpl extends ServiceImpl<SysStudentMapper, SysStudent> implements ISysStudentService\n{\n    @Override\n    public List<SysStudent> queryList(SysStudent sysStudent)\n    {\n        // 注意：mybatis-plus lambda 模式不支持 eclipse 的编译器\n        // LambdaQueryWrapper<SysStudent> queryWrapper = Wrappers.lambdaQuery();\n        // queryWrapper.eq(SysStudent::getStudentName, sysStudent.getStudentName());\n        QueryWrapper<SysStudent> queryWrapper = Wrappers.query();\n        if (StringUtils.isNotEmpty(sysStudent.getStudentName()))\n        {\n            queryWrapper.eq(\"student_name\", sysStudent.getStudentName());\n        }\n        if (StringUtils.isNotNull(sysStudent.getStudentAge()))\n        {\n            queryWrapper.eq(\"student_age\", sysStudent.getStudentAge());\n        }\n        if (StringUtils.isNotEmpty(sysStudent.getStudentHobby()))\n        {\n            queryWrapper.eq(\"student_hobby\", sysStudent.getStudentHobby());\n        }\n        return this.list(queryWrapper);\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n新增 ruoyi-ui\\src\\views\\system\\student\\index.vue\n\n<template>\n  <div class=\"app-container\">\n    <el-form :model=\"queryParams\" ref=\"queryForm\" :inline=\"true\" v-show=\"showSearch\" label-width=\"68px\">\n      <el-form-item label=\"学生名称\" prop=\"studentName\">\n        <el-input\n          v-model=\"queryParams.studentName\"\n          placeholder=\"请输入学生名称\"\n          clearable\n          size=\"small\"\n          @keyup.enter.native=\"handleQuery\"\n        />\n      </el-form-item>\n      <el-form-item label=\"年龄\" prop=\"studentAge\">\n        <el-input\n          v-model=\"queryParams.studentAge\"\n          placeholder=\"请输入年龄\"\n          clearable\n          size=\"small\"\n          @keyup.enter.native=\"handleQuery\"\n        />\n      </el-form-item>\n      <el-form-item label=\"爱好\" prop=\"studentHobby\">\n        <el-input\n          v-model=\"queryParams.studentHobby\"\n          placeholder=\"请输入爱好\"\n          clearable\n          size=\"small\"\n          @keyup.enter.native=\"handleQuery\"\n        />\n      </el-form-item>\n      <el-form-item label=\"性别\" prop=\"studentSex\">\n        <el-select v-model=\"queryParams.studentSex\" placeholder=\"请选择性别\" clearable size=\"small\">\n          <el-option label=\"请选择字典生成\" value=\"\" />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"状态\" prop=\"studentStatus\">\n        <el-select v-model=\"queryParams.studentStatus\" placeholder=\"请选择状态\" clearable size=\"small\">\n          <el-option label=\"请选择字典生成\" value=\"\" />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"生日\" prop=\"studentBirthday\">\n        <el-date-picker clearable size=\"small\"\n          v-model=\"queryParams.studentBirthday\"\n          type=\"date\"\n          value-format=\"yyyy-MM-dd\"\n          placeholder=\"选择生日\">\n        </el-date-picker>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" icon=\"el-icon-search\" size=\"mini\" @click=\"handleQuery\">搜索</el-button>\n        <el-button icon=\"el-icon-refresh\" size=\"mini\" @click=\"resetQuery\">重置</el-button>\n      </el-form-item>\n    </el-form>\n\n    <el-row :gutter=\"10\" class=\"mb8\">\n      <el-col :span=\"1.5\">\n        <el-button\n          type=\"primary\"\n          plain\n          icon=\"el-icon-plus\"\n          size=\"mini\"\n          @click=\"handleAdd\"\n          v-hasPermi=\"['system:student:add']\"\n        >新增</el-button>\n      </el-col>\n      <el-col :span=\"1.5\">\n        <el-button\n          type=\"success\"\n          plain\n          icon=\"el-icon-edit\"\n          size=\"mini\"\n          :disabled=\"single\"\n          @click=\"handleUpdate\"\n          v-hasPermi=\"['system:student:edit']\"\n        >修改</el-button>\n      </el-col>\n      <el-col :span=\"1.5\">\n        <el-button\n          type=\"danger\"\n          plain\n          icon=\"el-icon-delete\"\n          size=\"mini\"\n          :disabled=\"multiple\"\n          @click=\"handleDelete\"\n          v-hasPermi=\"['system:student:remove']\"\n        >删除</el-button>\n      </el-col>\n      <el-col :span=\"1.5\">\n        <el-button\n          type=\"warning\"\n          plain\n          icon=\"el-icon-download\"\n          size=\"mini\"\n          @click=\"handleExport\"\n          v-hasPermi=\"['system:student:export']\"\n        >导出</el-button>\n      </el-col>\n      <right-toolbar :showSearch.sync=\"showSearch\" @queryTable=\"getList\"></right-toolbar>\n    </el-row>\n\n    <el-table v-loading=\"loading\" :data=\"studentList\" @selection-change=\"handleSelectionChange\">\n      <el-table-column type=\"selection\" width=\"55\" align=\"center\" />\n      <el-table-column label=\"编号\" align=\"center\" prop=\"studentId\" />\n      <el-table-column label=\"学生名称\" align=\"center\" prop=\"studentName\" />\n      <el-table-column label=\"年龄\" align=\"center\" prop=\"studentAge\" />\n      <el-table-column label=\"爱好\" align=\"center\" prop=\"studentHobby\" />\n      <el-table-column label=\"性别\" align=\"center\" prop=\"studentSex\" />\n      <el-table-column label=\"状态\" align=\"center\" prop=\"studentStatus\" />\n      <el-table-column label=\"生日\" align=\"center\" prop=\"studentBirthday\" width=\"180\">\n        <template slot-scope=\"scope\">\n          <span>{{ parseTime(scope.row.studentBirthday, '{y}-{m}-{d}') }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\" align=\"center\" class-name=\"small-padding fixed-width\">\n        <template slot-scope=\"scope\">\n          <el-button\n            size=\"mini\"\n            type=\"text\"\n            icon=\"el-icon-edit\"\n            @click=\"handleUpdate(scope.row)\"\n            v-hasPermi=\"['system:student:edit']\"\n          >修改</el-button>\n          <el-button\n            size=\"mini\"\n            type=\"text\"\n            icon=\"el-icon-delete\"\n            @click=\"handleDelete(scope.row)\"\n            v-hasPermi=\"['system:student:remove']\"\n          >删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    \n    <pagination\n      v-show=\"total>0\"\n      :total=\"total\"\n      :page.sync=\"queryParams.pageNum\"\n      :limit.sync=\"queryParams.pageSize\"\n      @pagination=\"getList\"\n    />\n\n    <!-- 添加或修改学生信息对话框 -->\n    <el-dialog :title=\"title\" :visible.sync=\"open\" width=\"500px\" append-to-body>\n      <el-form ref=\"form\" :model=\"form\" :rules=\"rules\" label-width=\"80px\">\n        <el-form-item label=\"学生名称\" prop=\"studentName\">\n          <el-input v-model=\"form.studentName\" placeholder=\"请输入学生名称\" />\n        </el-form-item>\n        <el-form-item label=\"年龄\" prop=\"studentAge\">\n          <el-input v-model=\"form.studentAge\" placeholder=\"请输入年龄\" />\n        </el-form-item>\n        <el-form-item label=\"爱好\" prop=\"studentHobby\">\n          <el-input v-model=\"form.studentHobby\" placeholder=\"请输入爱好\" />\n        </el-form-item>\n        <el-form-item label=\"性别\" prop=\"studentSex\">\n          <el-select v-model=\"form.studentSex\" placeholder=\"请选择性别\">\n            <el-option label=\"请选择字典生成\" value=\"\" />\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"状态\">\n          <el-radio-group v-model=\"form.studentStatus\">\n            <el-radio label=\"1\">请选择字典生成</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"生日\" prop=\"studentBirthday\">\n          <el-date-picker clearable size=\"small\"\n            v-model=\"form.studentBirthday\"\n            type=\"date\"\n            value-format=\"yyyy-MM-dd\"\n            placeholder=\"选择生日\">\n          </el-date-picker>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\n        <el-button @click=\"cancel\">取 消</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { listStudent, getStudent, delStudent, addStudent, updateStudent, exportStudent } from \"@/api/system/student\";\n\nexport default {\n  name: \"Student\",\n  components: {\n  },\n  data() {\n    return {\n      // 遮罩层\n      loading: true,\n      // 选中数组\n      ids: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 显示搜索条件\n      showSearch: true,\n      // 总条数\n      total: 0,\n      // 学生信息表格数据\n      studentList: [],\n      // 弹出层标题\n      title: \"\",\n      // 是否显示弹出层\n      open: false,\n      // 查询参数\n      queryParams: {\n        pageNum: 1,\n        pageSize: 10,\n        studentName: null,\n        studentAge: null,\n        studentHobby: null,\n        studentSex: null,\n        studentStatus: null,\n        studentBirthday: null\n      },\n      // 表单参数\n      form: {},\n      // 表单校验\n      rules: {\n      }\n    };\n  },\n  created() {\n    this.getList();\n  },\n  methods: {\n    /** 查询学生信息列表 */\n    getList() {\n      this.loading = true;\n      listStudent(this.queryParams).then(response => {\n        this.studentList = response.rows;\n        this.total = response.total;\n        this.loading = false;\n      });\n    },\n    // 取消按钮\n    cancel() {\n      this.open = false;\n      this.reset();\n    },\n    // 表单重置\n    reset() {\n      this.form = {\n        studentId: null,\n        studentName: null,\n        studentAge: null,\n        studentHobby: null,\n        studentSex: null,\n        studentStatus: \"0\",\n        studentBirthday: null\n      };\n      this.resetForm(\"form\");\n    },\n    /** 搜索按钮操作 */\n    handleQuery() {\n      this.queryParams.pageNum = 1;\n      this.getList();\n    },\n    /** 重置按钮操作 */\n    resetQuery() {\n      this.resetForm(\"queryForm\");\n      this.handleQuery();\n    },\n    // 多选框选中数据\n    handleSelectionChange(selection) {\n      this.ids = selection.map(item => item.studentId)\n      this.single = selection.length!==1\n      this.multiple = !selection.length\n    },\n    /** 新增按钮操作 */\n    handleAdd() {\n      this.reset();\n      this.open = true;\n      this.title = \"添加学生信息\";\n    },\n    /** 修改按钮操作 */\n    handleUpdate(row) {\n      this.reset();\n      const studentId = row.studentId || this.ids\n      getStudent(studentId).then(response => {\n        this.form = response.data;\n        this.open = true;\n        this.title = \"修改学生信息\";\n      });\n    },\n    /** 提交按钮 */\n    submitForm() {\n      this.$refs[\"form\"].validate(valid => {\n        if (valid) {\n          if (this.form.studentId != null) {\n            updateStudent(this.form).then(response => {\n              this.msgSuccess(\"修改成功\");\n              this.open = false;\n              this.getList();\n            });\n          } else {\n            addStudent(this.form).then(response => {\n              this.msgSuccess(\"新增成功\");\n              this.open = false;\n              this.getList();\n            });\n          }\n        }\n      });\n    },\n    /** 删除按钮操作 */\n    handleDelete(row) {\n      const studentIds = row.studentId || this.ids;\n      this.$confirm('是否确认删除学生信息编号为\"' + studentIds + '\"的数据项?', \"警告\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        }).then(function() {\n          return delStudent(studentIds);\n        }).then(() => {\n          this.getList();\n          this.msgSuccess(\"删除成功\");\n        })\n    },\n    /** 导出按钮操作 */\n    handleExport() {\n      const queryParams = this.queryParams;\n      this.$confirm('是否确认导出所有学生信息数据项?', \"警告\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        }).then(function() {\n          return exportStudent(queryParams);\n        }).then(response => {\n          this.download(response.msg);\n        })\n    }\n  }\n};\n</script>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n\n\n新增 ruoyi-ui\\src\\api\\system\\student.js\n\nimport request from '@/utils/request'\n\n// 查询学生信息列表\nexport function listStudent(query) {\n  return request({\n    url: '/system/student/list',\n    method: 'get',\n    params: query\n  })\n}\n\n// 查询学生信息详细\nexport function getStudent(studentId) {\n  return request({\n    url: '/system/student/' + studentId,\n    method: 'get'\n  })\n}\n\n// 新增学生信息\nexport function addStudent(data) {\n  return request({\n    url: '/system/student',\n    method: 'post',\n    data: data\n  })\n}\n\n// 修改学生信息\nexport function updateStudent(data) {\n  return request({\n    url: '/system/student',\n    method: 'put',\n    data: data\n  })\n}\n\n// 删除学生信息\nexport function delStudent(studentId) {\n  return request({\n    url: '/system/student/' + studentId,\n    method: 'delete'\n  })\n}\n\n// 导出学生信息\nexport function exportStudent(query) {\n  return request({\n    url: '/system/student/export',\n    method: 'get',\n    params: query\n  })\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n6、登录系统测试学生菜单增删改查功能。\n\n#\n集成easyexcel实现excel表格增强\n\n如果默认的excel注解已经满足不了你的需求，可以使用excel的增强解决方案easyexcel，它是阿里巴巴开源的一个excel处理框架，使用简单、功能特性多、以节省内存著称。\n\n1、ruoyi-common\\pom.xml模块添加整合依赖\n\n<!-- easyexcel -->\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>easyexcel</artifactId>\n\t<version>2.2.6</version>\n</dependency>\n\n1\n2\n3\n4\n5\n6\n\n\n2、ExcelUtil.java新增easyexcel导出导入方法\n\nimport com.alibaba.excel.EasyExcel;\n\n/**\n * 对excel表单默认第一个索引名转换成list（EasyExcel）\n * \n * @param is 输入流\n * @return 转换后集合\n */\npublic List<T> importEasyExcel(InputStream is) throws Exception\n{\n\treturn EasyExcel.read(is).head(clazz).sheet().doReadSync();\n}\n\n/**\n * 对list数据源将其里面的数据导入到excel表单（EasyExcel）\n * \n * @param list 导出数据集合\n * @param sheetName 工作表的名称\n * @return 结果\n */\npublic void exportEasyExcel(HttpServletResponse response, List<T> list, String sheetName)\n{\n\ttry\n\t{\n\t\tEasyExcel.write(response.getOutputStream(), clazz).sheet(sheetName).doWrite(list);\n\t}\n\tcatch (IOException e)\n\t{\n\t\tlog.error(\"导出EasyExcel异常{}\", e.getMessage());\n\t}\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n3、模拟测试，以操作日志为例，修改相关类。\n\nSysOperlogController.java改为exportEasyExcel\n\n\n\n\n\n\n\n\n\n \n\n\n\n@Log(title = \"操作日志\", businessType = BusinessType.EXPORT)\n@PreAuthorize(\"@ss.hasPermi('monitor:operlog:export')\")\n@PostMapping(\"/export\")\npublic void export(HttpServletResponse response, SysOperLog operLog)\n{\n\tList<SysOperLog> list = operLogService.selectOperLogList(operLog);\n\tExcelUtil<SysOperLog> util = new ExcelUtil<SysOperLog>(SysOperLog.class);\n\tutil.exportEasyExcel(response, list, \"操作日志\");\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nSysOperLog.java修改为@ExcelProperty注解\n\npackage com.ruoyi.system.domain;\n\nimport java.util.Date;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\nimport org.apache.commons.lang3.builder.ToStringStyle;\nimport com.alibaba.excel.annotation.ExcelIgnoreUnannotated;\nimport com.alibaba.excel.annotation.ExcelProperty;\nimport com.alibaba.excel.annotation.format.DateTimeFormat;\nimport com.alibaba.excel.annotation.write.style.ColumnWidth;\nimport com.alibaba.excel.annotation.write.style.HeadFontStyle;\nimport com.alibaba.excel.annotation.write.style.HeadRowHeight;\nimport com.ruoyi.common.core.domain.BaseEntity;\nimport com.ruoyi.system.domain.read.BusiTypeStringNumberConverter;\nimport com.ruoyi.system.domain.read.OperTypeConverter;\nimport com.ruoyi.system.domain.read.StatusConverter;\n\n/**\n * 操作日志记录表 oper_log\n * \n * @author ruoyi\n */\n@ExcelIgnoreUnannotated\n@ColumnWidth(16)\n@HeadRowHeight(14)\n@HeadFontStyle(fontHeightInPoints = 11)\npublic class SysOperLog extends BaseEntity\n{\n    private static final long serialVersionUID = 1L;\n\n    /** 日志主键 */\n    @ExcelProperty(value = \"操作序号\")\n    private Long operId;\n\n    /** 操作模块 */\n    @ExcelProperty(value = \"操作模块\")\n    private String title;\n\n    /** 业务类型（0其它 1新增 2修改 3删除） */\n    @ExcelProperty(value = \"业务类型\", converter = BusiTypeStringNumberConverter.class)\n    private Integer businessType;\n\n    /** 业务类型数组 */\n    private Integer[] businessTypes;\n\n    /** 请求方法 */\n    @ExcelProperty(value = \"请求方法\")\n    private String method;\n\n    /** 请求方式 */\n    @ExcelProperty(value = \"请求方式\")\n    private String requestMethod;\n\n    /** 操作类别（0其它 1后台用户 2手机端用户） */\n    @ExcelProperty(value = \"操作类别\", converter = OperTypeConverter.class)\n    private Integer operatorType;\n\n    /** 操作人员 */\n    @ExcelProperty(value = \"操作人员\")\n    private String operName;\n\n    /** 部门名称 */\n    @ExcelProperty(value = \"部门名称\")\n    private String deptName;\n\n    /** 请求url */\n    @ExcelProperty(value = \"请求地址\")\n    private String operUrl;\n\n    /** 操作地址 */\n    @ExcelProperty(value = \"操作地址\")\n    private String operIp;\n\n    /** 操作地点 */\n    @ExcelProperty(value = \"操作地点\")\n    private String operLocation;\n\n    /** 请求参数 */\n    @ExcelProperty(value = \"请求参数\")\n    private String operParam;\n\n    /** 返回参数 */\n    @ExcelProperty(value = \"返回参数\")\n    private String jsonResult;\n\n    /** 操作状态（0正常 1异常） */\n    @ExcelProperty(value = \"状态\", converter = StatusConverter.class)\n    private Integer status;\n\n    /** 错误消息 */\n    @ExcelProperty(value = \"错误消息\")\n    private String errorMsg;\n\n    /** 操作时间 */\n    @DateTimeFormat(\"yyyy-MM-dd HH:mm:ss\")\n    @ExcelProperty(value = \"操作时间\")\n    private Date operTime;\n\n    public Long getOperId()\n    {\n        return operId;\n    }\n\n    public void setOperId(Long operId)\n    {\n        this.operId = operId;\n    }\n\n    public String getTitle()\n    {\n        return title;\n    }\n\n    public void setTitle(String title)\n    {\n        this.title = title;\n    }\n\n    public Integer getBusinessType()\n    {\n        return businessType;\n    }\n\n    public void setBusinessType(Integer businessType)\n    {\n        this.businessType = businessType;\n    }\n\n    public Integer[] getBusinessTypes()\n    {\n        return businessTypes;\n    }\n\n    public void setBusinessTypes(Integer[] businessTypes)\n    {\n        this.businessTypes = businessTypes;\n    }\n\n    public String getMethod()\n    {\n        return method;\n    }\n\n    public void setMethod(String method)\n    {\n        this.method = method;\n    }\n\n    public String getRequestMethod()\n    {\n        return requestMethod;\n    }\n\n    public void setRequestMethod(String requestMethod)\n    {\n        this.requestMethod = requestMethod;\n    }\n\n    public Integer getOperatorType()\n    {\n        return operatorType;\n    }\n\n    public void setOperatorType(Integer operatorType)\n    {\n        this.operatorType = operatorType;\n    }\n\n    public String getOperName()\n    {\n        return operName;\n    }\n\n    public void setOperName(String operName)\n    {\n        this.operName = operName;\n    }\n\n    public String getDeptName()\n    {\n        return deptName;\n    }\n\n    public void setDeptName(String deptName)\n    {\n        this.deptName = deptName;\n    }\n\n    public String getOperUrl()\n    {\n        return operUrl;\n    }\n\n    public void setOperUrl(String operUrl)\n    {\n        this.operUrl = operUrl;\n    }\n\n    public String getOperIp()\n    {\n        return operIp;\n    }\n\n    public void setOperIp(String operIp)\n    {\n        this.operIp = operIp;\n    }\n\n    public String getOperLocation()\n    {\n        return operLocation;\n    }\n\n    public void setOperLocation(String operLocation)\n    {\n        this.operLocation = operLocation;\n    }\n\n    public String getOperParam()\n    {\n        return operParam;\n    }\n\n    public void setOperParam(String operParam)\n    {\n        this.operParam = operParam;\n    }\n\n    public String getJsonResult()\n    {\n        return jsonResult;\n    }\n\n    public void setJsonResult(String jsonResult)\n    {\n        this.jsonResult = jsonResult;\n    }\n\n    public Integer getStatus()\n    {\n        return status;\n    }\n\n    public void setStatus(Integer status)\n    {\n        this.status = status;\n    }\n\n    public String getErrorMsg()\n    {\n        return errorMsg;\n    }\n\n    public void setErrorMsg(String errorMsg)\n    {\n        this.errorMsg = errorMsg;\n    }\n\n    public Date getOperTime()\n    {\n        return operTime;\n    }\n\n    public void setOperTime(Date operTime)\n    {\n        this.operTime = operTime;\n    }\n\n    @Override\n    public String toString() {\n        return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)\n            .append(\"operId\", getOperId())\n            .append(\"title\", getTitle())\n            .append(\"businessType\", getBusinessType())\n            .append(\"businessTypes\", getBusinessTypes())\n            .append(\"method\", getMethod())\n            .append(\"requestMethod\", getRequestMethod())\n            .append(\"operatorType\", getOperatorType())\n            .append(\"operName\", getOperName())\n            .append(\"deptName\", getDeptName())\n            .append(\"operUrl\", getOperUrl())\n            .append(\"operIp\", getOperIp())\n            .append(\"operLocation\", getOperLocation())\n            .append(\"operParam\", getOperParam())\n            .append(\"status\", getStatus())\n            .append(\"errorMsg\", getErrorMsg())\n            .append(\"operTime\", getOperTime())\n            .toString();\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n\n\n添加字符串翻译内容\n\nruoyi-system\\com\\ruoyi\\system\\domain\\read\\BusiTypeStringNumberConverter.java\n\npackage com.ruoyi.system.domain.read;\n\nimport com.alibaba.excel.converters.Converter;\nimport com.alibaba.excel.enums.CellDataTypeEnum;\nimport com.alibaba.excel.metadata.CellData;\nimport com.alibaba.excel.metadata.GlobalConfiguration;\nimport com.alibaba.excel.metadata.property.ExcelContentProperty;\n\n/**\n * 业务类型字符串处理\n *\n * @author ruoyi\n */\n@SuppressWarnings(\"rawtypes\")\npublic class BusiTypeStringNumberConverter implements Converter<Integer>\n{\n    @Override\n    public Class supportJavaTypeKey()\n    {\n        return Integer.class;\n    }\n\n    @Override\n    public CellDataTypeEnum supportExcelTypeKey()\n    {\n        return CellDataTypeEnum.STRING;\n    }\n\n    @Override\n    public Integer convertToJavaData(CellData cellData, ExcelContentProperty contentProperty,\n            GlobalConfiguration globalConfiguration)\n    {\n        Integer value = 0;\n        String str = cellData.getStringValue();\n        if (\"新增\".equals(str))\n        {\n            value = 1;\n        }\n        else if (\"修改\".equals(str))\n        {\n            value = 2;\n        }\n        else if (\"删除\".equals(str))\n        {\n            value = 3;\n        }\n        else if (\"授权\".equals(str))\n        {\n            value = 4;\n        }\n        else if (\"导出\".equals(str))\n        {\n            value = 5;\n        }\n        else if (\"导入\".equals(str))\n        {\n            value = 6;\n        }\n        else if (\"强退\".equals(str))\n        {\n            value = 7;\n        }\n        else if (\"生成代码\".equals(str))\n        {\n            value = 8;\n        }\n        else if (\"清空数据\".equals(str))\n        {\n            value = 9;\n        }\n        return value;\n    }\n\n    @Override\n    public CellData convertToExcelData(Integer value, ExcelContentProperty contentProperty,\n            GlobalConfiguration globalConfiguration)\n    {\n        String str = \"其他\";\n        if (1 == value)\n        {\n            str = \"新增\";\n        }\n        else if (2 == value)\n        {\n            str = \"修改\";\n        }\n        else if (3 == value)\n        {\n            str = \"删除\";\n        }\n        else if (4 == value)\n        {\n            str = \"授权\";\n        }\n        else if (5 == value)\n        {\n            str = \"导出\";\n        }\n        else if (6 == value)\n        {\n            str = \"导入\";\n        }\n        else if (7 == value)\n        {\n            str = \"强退\";\n        }\n        else if (8 == value)\n        {\n            str = \"生成代码\";\n        }\n        else if (9 == value)\n        {\n            str = \"清空数据\";\n        }\n        return new CellData(str);\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n\n\nruoyi-system\\com\\ruoyi\\system\\domain\\read\\OperTypeConverter.java\n\npackage com.ruoyi.system.domain.read;\n\nimport com.alibaba.excel.converters.Converter;\nimport com.alibaba.excel.enums.CellDataTypeEnum;\nimport com.alibaba.excel.metadata.CellData;\nimport com.alibaba.excel.metadata.GlobalConfiguration;\nimport com.alibaba.excel.metadata.property.ExcelContentProperty;\n\n/**\n * 操作类别字符串处理\n *\n * @author ruoyi\n */\n@SuppressWarnings(\"rawtypes\")\npublic class OperTypeConverter implements Converter<Integer>\n{\n    @Override\n    public Class supportJavaTypeKey()\n    {\n        return Integer.class;\n    }\n\n    @Override\n    public CellDataTypeEnum supportExcelTypeKey()\n    {\n        return CellDataTypeEnum.STRING;\n    }\n\n    @Override\n    public Integer convertToJavaData(CellData cellData, ExcelContentProperty contentProperty,\n            GlobalConfiguration globalConfiguration)\n    {\n        Integer value = 0;\n        String str = cellData.getStringValue();\n        if (\"后台用户\".equals(str))\n        {\n            value = 1;\n        }\n        else if (\"手机端用户\".equals(str))\n        {\n            value = 2;\n        }\n        return value;\n    }\n\n    @Override\n    public CellData convertToExcelData(Integer value, ExcelContentProperty contentProperty,\n            GlobalConfiguration globalConfiguration)\n    {\n        String str = \"其他\";\n        if (1 == value)\n        {\n            str = \"后台用户\";\n        }\n        else if (2 == value)\n        {\n            str = \"手机端用户\";\n        }\n        return new CellData(str);\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\n\nruoyi-system\\com\\ruoyi\\system\\domain\\read\\StatusConverter.java\n\npackage com.ruoyi.system.domain.read;\n\nimport com.alibaba.excel.converters.Converter;\nimport com.alibaba.excel.enums.CellDataTypeEnum;\nimport com.alibaba.excel.metadata.CellData;\nimport com.alibaba.excel.metadata.GlobalConfiguration;\nimport com.alibaba.excel.metadata.property.ExcelContentProperty;\n\n/**\n * 状态字符串处理\n *\n * @author ruoyi\n */\n@SuppressWarnings(\"rawtypes\")\npublic class StatusConverter implements Converter<Integer>\n{\n    @Override\n    public Class supportJavaTypeKey()\n    {\n        return Integer.class;\n    }\n\n    @Override\n    public CellDataTypeEnum supportExcelTypeKey()\n    {\n        return CellDataTypeEnum.STRING;\n    }\n\n    @Override\n    public CellData convertToExcelData(Integer value, ExcelContentProperty contentProperty,\n            GlobalConfiguration globalConfiguration)\n    {\n        return new CellData(0 == value ? \"正常\" : \"异常\");\n    }\n\n    @Override\n    public Integer convertToJavaData(CellData cellData, ExcelContentProperty contentProperty,\n            GlobalConfiguration globalConfiguration) throws Exception\n    {\n        return \"正常\".equals(cellData.getStringValue()) ? 0 : 1;\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n4、登录系统，进入系统管理-日志管理-操作日志-执行导出功能\n\n#\n集成knife4j实现swagger文档增强\n\n如果不习惯使用swagger可以使用前端UI的增强解决方案knife4j，对比swagger相比有以下优势，友好界面，离线文档，接口排序，安全控制，在线调试，文档清晰，注解增强，容易上手。\n\n1、ruoyi-admin\\pom.xml模块添加整合依赖\n\n<!-- knife4j -->\n<dependency>\n\t<groupId>com.github.xiaoymin</groupId>\n\t<artifactId>knife4j-spring-boot-starter</artifactId>\n\t<version>3.0.3</version>\n</dependency>\n\n1\n2\n3\n4\n5\n6\n\n\n2、修改ry-ui\\views\\tool\\swagger\\index.vue跳转地址\n\nsrc: process.env.VUE_APP_BASE_API + \"/doc.html\",\n\n1\n\n\n3、登录系统，访问菜单系统工具/系统接口，出现如下图表示成功。\n\n提示\n\n引用knife4j-spring-boot-starter依赖，项目中的swagger依赖可以删除。\n\n#\n集成redisson实现redis分布式锁\n\nRedisson是Redis官方推荐的Java版的Redis客户端。它提供的功能非常多，也非常强大，此处我们只用它的分布式锁功能。\n\n1、引入依赖\n\n<!-- Redisson 锁功能 -->\n<dependency>\n\t<groupId>org.redisson</groupId>\n\t<artifactId>redisson-spring-boot-starter</artifactId>\n\t<version>3.16.2</version>\n</dependency>\n\n1\n2\n3\n4\n5\n6\n\n\n2、添加工具类RedisLock.java\n\npackage com.ruoyi.common.core.redis;\n\nimport org.redisson.api.RLock;\nimport org.redisson.api.RedissonClient;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * redis锁工具类\n *\n * @author ruoyi\n */\n@Component\npublic class RedisLock\n{\n    @Autowired\n    private RedissonClient redissonClient;\n\n    /**\n     * 获取锁\n     *\n     * @param lockKey 锁实例key\n     * @return 锁信息\n     */\n    public RLock getRLock(String lockKey)\n    {\n        return redissonClient.getLock(lockKey);\n    }\n\n    /**\n     * 加锁\n     * \n     * @param lockKey 锁实例key\n     * @return 锁信息\n     */\n    public RLock lock(String lockKey)\n    {\n        RLock lock = getRLock(lockKey);\n        lock.lock();\n        return lock;\n    }\n\n    /**\n     * 加锁\n     * \n     * @param lockKey 锁实例key\n     * @param leaseTime 上锁后自动释放锁时间\n     * @return true=成功；false=失败\n     */\n    public Boolean tryLock(String lockKey, long leaseTime)\n    {\n        return tryLock(lockKey, 0, leaseTime, TimeUnit.SECONDS);\n    }\n\n    /**\n     * 加锁\n     * \n     * @param lockKey 锁实例key\n     * @param leaseTime 上锁后自动释放锁时间\n     * @param unit 时间颗粒度\n     * @return true=加锁成功；false=加锁失败\n     */\n    public Boolean tryLock(String lockKey, long leaseTime, TimeUnit unit)\n    {\n        return tryLock(lockKey, 0, leaseTime, unit);\n    }\n\n    /**\n     * 加锁\n     * \n     * @param lockKey 锁实例key\n     * @param waitTime 最多等待时间\n     * @param leaseTime 上锁后自动释放锁时间\n     * @param unit 时间颗粒度\n     * @return true=加锁成功；false=加锁失败\n     */\n    public Boolean tryLock(String lockKey, long waitTime, long leaseTime, TimeUnit unit)\n    {\n        RLock rLock = getRLock(lockKey);\n        boolean tryLock = false;\n        try\n        {\n            tryLock = rLock.tryLock(waitTime, leaseTime, unit);\n        }\n        catch (InterruptedException e)\n        {\n            return false;\n        }\n        return tryLock;\n    }\n\n    /**\n     * 释放锁\n     * \n     * @param lockKey 锁实例key\n     */\n    public void unlock(String lockKey)\n    {\n        RLock lock = getRLock(lockKey);\n        lock.unlock();\n    }\n\n    /**\n     * 释放锁\n     * \n     * @param lock 锁信息\n     */\n    public void unlock(RLock lock)\n    {\n        lock.unlock();\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n\n\n3、新增配置RedissonConfig.java\n\npackage com.ruoyi.framework.config;\n\nimport org.redisson.Redisson;\nimport org.redisson.api.RedissonClient;\nimport org.redisson.config.Config;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * redisson配置\n * \n * @author ruoyi\n */\n@Configuration\npublic class RedissonConfig\n{\n    @Value(\"${spring.redis.host}\")\n    private String host;\n\n    @Value(\"${spring.redis.port}\")\n    private String port;\n\n    @Value(\"${spring.redis.password}\")\n    private String password;\n\n    @Bean(destroyMethod = \"shutdown\")\n    @ConditionalOnMissingBean(RedissonClient.class)\n    public RedissonClient redissonClient()\n    {\n        Config config = new Config();\n        config.useSingleServer().setAddress(\"redis://\" + host + \":\" + port); // 更多.set\n        return Redisson.create(config);\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n4、使用方式\n\n@Autowired\nprivate RedisLock redisLock;\n\n// lockKey 锁实例key waitTime 最多等待时间 leaseTime 上锁后自动释放锁时间  unit 时间颗粒度\nredisLock.lock(lockKey);\nredisLock.tryLock(lockKey, leaseTime);\nredisLock.tryLock(lockKey, leaseTime, unit);\nredisLock.tryLock(lockKey, waitTime, leaseTime, unit);\nredisLock.unlock(lockKey);\nredisLock.unlock(lock);\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n#\n集成ip2region实现离线IP地址定位\n\n离线IP地址定位库主要用于内网或想减少对外访问http带来的资源消耗。（代码已兼容支持jar包部署）\n\n1、引入依赖\n\n<!-- 离线IP地址定位库 -->\n<dependency>\n\t<groupId>org.lionsoul</groupId>\n\t<artifactId>ip2region</artifactId>\n\t<version>1.7.2</version>\n</dependency>\n\n1\n2\n3\n4\n5\n6\n\n\n2、添加工具类RegionUtil.java\n\npackage com.ruoyi.common.utils;\n\nimport java.io.File;\nimport java.io.InputStream;\nimport java.lang.reflect.Method;\nimport org.apache.commons.io.FileUtils;\nimport org.lionsoul.ip2region.DataBlock;\nimport org.lionsoul.ip2region.DbConfig;\nimport org.lionsoul.ip2region.DbSearcher;\nimport org.lionsoul.ip2region.Util;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.ClassPathResource;\n\n/**\n * 根据ip离线查询地址\n *\n * @author ruoyi\n */\npublic class RegionUtil\n{\n    private static final Logger log = LoggerFactory.getLogger(RegionUtil.class);\n\n    private static final String JAVA_TEMP_DIR = \"java.io.tmpdir\";\n\n    static DbConfig config = null;\n    static DbSearcher searcher = null;\n\n    /**\n     * 初始化IP库\n     */\n    static\n    {\n        try\n        {\n            // 因为jar无法读取文件,复制创建临时文件\n            String dbPath = RegionUtil.class.getResource(\"/ip2region/ip2region.db\").getPath();\n            File file = new File(dbPath);\n            if (!file.exists())\n            {\n                String tmpDir = System.getProperties().getProperty(JAVA_TEMP_DIR);\n                dbPath = tmpDir + \"ip2region.db\";\n                file = new File(dbPath);\n                ClassPathResource cpr = new ClassPathResource(\"ip2region\" + File.separator + \"ip2region.db\");\n                InputStream resourceAsStream = cpr.getInputStream();\n                if (resourceAsStream != null)\n                {\n                    FileUtils.copyInputStreamToFile(resourceAsStream, file);\n                }\n            }\n            config = new DbConfig();\n            searcher = new DbSearcher(config, dbPath);\n            log.info(\"bean [{}]\", config);\n            log.info(\"bean [{}]\", searcher);\n        }\n        catch (Exception e)\n        {\n            log.error(\"init ip region error:{}\", e);\n        }\n    }\n\n    /**\n     * 解析IP\n     *\n     * @param ip\n     * @return\n     */\n    public static String getRegion(String ip)\n    {\n        try\n        {\n            // db\n            if (searcher == null || StringUtils.isEmpty(ip))\n            {\n                log.error(\"DbSearcher is null\");\n                return StringUtils.EMPTY;\n            }\n            long startTime = System.currentTimeMillis();\n            // 查询算法\n            int algorithm = DbSearcher.MEMORY_ALGORITYM;\n            Method method = null;\n            switch (algorithm)\n            {\n                case DbSearcher.BTREE_ALGORITHM:\n                    method = searcher.getClass().getMethod(\"btreeSearch\", String.class);\n                    break;\n                case DbSearcher.BINARY_ALGORITHM:\n                    method = searcher.getClass().getMethod(\"binarySearch\", String.class);\n                    break;\n                case DbSearcher.MEMORY_ALGORITYM:\n                    method = searcher.getClass().getMethod(\"memorySearch\", String.class);\n                    break;\n            }\n\n            DataBlock dataBlock = null;\n            if (Util.isIpAddress(ip) == false)\n            {\n                log.warn(\"warning: Invalid ip address\");\n            }\n            dataBlock = (DataBlock) method.invoke(searcher, ip);\n            String result = dataBlock.getRegion();\n            long endTime = System.currentTimeMillis();\n            log.debug(\"region use time[{}] result[{}]\", endTime - startTime, result);\n            return result;\n\n        }\n        catch (Exception e)\n        {\n            log.error(\"error:{}\", e);\n        }\n        return StringUtils.EMPTY;\n    }\n\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n\n\n3、修改AddressUtils.java\n\npackage com.ruoyi.common.utils.ip;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.ruoyi.common.config.RuoYiConfig;\nimport com.ruoyi.common.utils.RegionUtil;\nimport com.ruoyi.common.utils.StringUtils;\n\n/**\n * 获取地址类\n * \n * @author ruoyi\n */\npublic class AddressUtils\n{\n    private static final Logger log = LoggerFactory.getLogger(AddressUtils.class);\n\n    // 未知地址\n    public static final String UNKNOWN = \"XX XX\";\n\n    public static String getRealAddressByIP(String ip)\n    {\n        String address = UNKNOWN;\n        // 内网不查询\n        if (IpUtils.internalIp(ip))\n        {\n            return \"内网IP\";\n        }\n        if (RuoYiConfig.isAddressEnabled())\n        {\n            try\n            {\n                String rspStr = RegionUtil.getRegion(ip);\n                if (StringUtils.isEmpty(rspStr))\n                {\n                    log.error(\"获取地理位置异常 {}\", ip);\n                    return UNKNOWN;\n                }\n                String[] obj = rspStr.split(\"\\\\|\");\n                String region = obj[2];\n                String city = obj[3];\n\n                return String.format(\"%s %s\", region, city);\n            }\n            catch (Exception e)\n            {\n                log.error(\"获取地理位置异常 {}\", e);\n            }\n        }\n        return address;\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n4、添加离线IP地址库插件\n\n下载前端插件相关包和代码实现ruoyi/集成ip2region离线地址定位.zip\n\n链接: https://pan.baidu.com/s/13JVC9jm-Dp9PfHdDDylLCQ 提取码: y9jt\n\n5、添加离线IP地址库\n\n在src/main/resources下新建ip2region复制文件ip2region.db到目录下。\n\n#\n集成jsencrypt实现密码加密传输方式\n\n目前登录接口密码是明文传输，如果安全性有要求，可以调整成加密方式传输。参考如下\n\n1、修改前端login.js对密码进行rsa加密。\n\n\n\n\n\n \n\n\n\n\nimport { encrypt } from '@/utils/jsencrypt'\n\nexport function login(username, password, code, uuid) {\n  password = encrypt(password);\n  .........\n}\n\n1\n2\n3\n4\n5\n6\n\n\n2、工具类sign包下添加RsaUtils.java，用于RSA加密解密。\n\npackage com.ruoyi.common.utils.sign;\n\nimport org.apache.commons.codec.binary.Base64;\nimport javax.crypto.Cipher;\nimport java.security.*;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.interfaces.RSAPublicKey;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.security.spec.X509EncodedKeySpec;\n\n/**\n * RSA加密解密\n * \n * @author ruoyi\n **/\npublic class RsaUtils\n{\n    // Rsa 私钥\n    public static String privateKey = \"MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAqhHyZfSsYourNxaY\"\n            + \"7Nt+PrgrxkiA50efORdI5U5lsW79MmFnusUA355oaSXcLhu5xxB38SMSyP2KvuKN\"\n            + \"PuH3owIDAQABAkAfoiLyL+Z4lf4Myxk6xUDgLaWGximj20CUf+5BKKnlrK+Ed8gA\"\n            + \"kM0HqoTt2UZwA5E2MzS4EI2gjfQhz5X28uqxAiEA3wNFxfrCZlSZHb0gn2zDpWow\"\n            + \"cSxQAgiCstxGUoOqlW8CIQDDOerGKH5OmCJ4Z21v+F25WaHYPxCFMvwxpcw99Ecv\"\n            + \"DQIgIdhDTIqD2jfYjPTY8Jj3EDGPbH2HHuffvflECt3Ek60CIQCFRlCkHpi7hthh\"\n            + \"YhovyloRYsM+IS9h/0BzlEAuO0ktMQIgSPT3aFAgJYwKpqRYKlLDVcflZFCKY7u3\" \n            + \"UP8iWi1Qw0Y=\";\n\n    /**\n     * 私钥解密\n     *\n     * @param privateKeyString 私钥\n     * @param text 待解密的文本\n     * @return 解密后的文本\n     */\n    public static String decryptByPrivateKey(String text) throws Exception\n    {\n        return decryptByPrivateKey(privateKey, text);\n    }\n\n    /**\n     * 公钥解密\n     *\n     * @param publicKeyString 公钥\n     * @param text 待解密的信息\n     * @return 解密后的文本\n     */\n    public static String decryptByPublicKey(String publicKeyString, String text) throws Exception\n    {\n        X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(Base64.decodeBase64(publicKeyString));\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n        PublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n        Cipher cipher = Cipher.getInstance(\"RSA\");\n        cipher.init(Cipher.DECRYPT_MODE, publicKey);\n        byte[] result = cipher.doFinal(Base64.decodeBase64(text));\n        return new String(result);\n    }\n\n    /**\n     * 私钥加密\n     *\n     * @param privateKeyString 私钥\n     * @param text 待加密的信息\n     * @return 加密后的文本\n     */\n    public static String encryptByPrivateKey(String privateKeyString, String text) throws Exception\n    {\n        PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(Base64.decodeBase64(privateKeyString));\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n        PrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n        Cipher cipher = Cipher.getInstance(\"RSA\");\n        cipher.init(Cipher.ENCRYPT_MODE, privateKey);\n        byte[] result = cipher.doFinal(text.getBytes());\n        return Base64.encodeBase64String(result);\n    }\n\n    /**\n     * 私钥解密\n     *\n     * @param privateKeyString 私钥\n     * @param text 待解密的文本\n     * @return 解密后的文本\n     */\n    public static String decryptByPrivateKey(String privateKeyString, String text) throws Exception\n    {\n        PKCS8EncodedKeySpec pkcs8EncodedKeySpec5 = new PKCS8EncodedKeySpec(Base64.decodeBase64(privateKeyString));\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n        PrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec5);\n        Cipher cipher = Cipher.getInstance(\"RSA\");\n        cipher.init(Cipher.DECRYPT_MODE, privateKey);\n        byte[] result = cipher.doFinal(Base64.decodeBase64(text));\n        return new String(result);\n    }\n\n    /**\n     * 公钥加密\n     *\n     * @param publicKeyString 公钥\n     * @param text 待加密的文本\n     * @return 加密后的文本\n     */\n    public static String encryptByPublicKey(String publicKeyString, String text) throws Exception\n    {\n        X509EncodedKeySpec x509EncodedKeySpec2 = new X509EncodedKeySpec(Base64.decodeBase64(publicKeyString));\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n        PublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec2);\n        Cipher cipher = Cipher.getInstance(\"RSA\");\n        cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n        byte[] result = cipher.doFinal(text.getBytes());\n        return Base64.encodeBase64String(result);\n    }\n\n    /**\n     * 构建RSA密钥对\n     *\n     * @return 生成后的公私钥信息\n     */\n    public static RsaKeyPair generateKeyPair() throws NoSuchAlgorithmException\n    {\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n        keyPairGenerator.initialize(1024);\n        KeyPair keyPair = keyPairGenerator.generateKeyPair();\n        RSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();\n        RSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();\n        String publicKeyString = Base64.encodeBase64String(rsaPublicKey.getEncoded());\n        String privateKeyString = Base64.encodeBase64String(rsaPrivateKey.getEncoded());\n        return new RsaKeyPair(publicKeyString, privateKeyString);\n    }\n\n    /**\n     * RSA密钥对对象\n     */\n    public static class RsaKeyPair\n    {\n        private final String publicKey;\n        private final String privateKey;\n\n        public RsaKeyPair(String publicKey, String privateKey)\n        {\n            this.publicKey = publicKey;\n            this.privateKey = privateKey;\n        }\n\n        public String getPublicKey()\n        {\n            return publicKey;\n        }\n\n        public String getPrivateKey()\n        {\n            return privateKey;\n        }\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n\n\n3、登录方法SysLoginController.java，对密码进行rsa解密。\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n// 关键代码 RsaUtils.decryptByPrivateKey(password)\n@PostMapping(\"/login\")\npublic AjaxResult login(@RequestBody LoginBody loginBody)\n{\n\tAjaxResult ajax = AjaxResult.success();\n\t// 生成令牌\n\tString token = loginService.login(loginBody.getUsername(),\n\t\t\tRsaUtils.decryptByPrivateKey(loginBody.getPassword()), loginBody.getCode(), loginBody.getUuid());\n\tajax.put(Constants.TOKEN, token);\n\treturn ajax;\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n访问 http://localhost/login \n(opens new window)\n登录页面。提交时检查密码是否为加密传输，且后台也能正常解密。\n\n#\n集成druid实现数据库密码加密功能\n\n参考集成druid实现数据库密码加密功能\n\n#\n集成browscap读取浏览器用户代理\n\n参考集成browscap读取浏览器用户代理\n\n#\n集成dynamic-datasource实现多数据源增强\n\n集成dynamic-datasource实现多数据源增强\n\n← 组件文档\n项目扩展 →"
  },
  {
    "html": "RuoYi\n文档分离版微服务版移动端版💖赞助💖\n生态系统 \nGitHub \n(opens new window)\nGitee \n(opens new window)\n\n\n\n文档\n\n介绍\n快速了解\n环境部署\n项目介绍\n后台手册\n前端手册\n组件文档\n插件集成\n项目扩展\n视频教程\n视频教程\n更新日志\n\n其它\n\n常见问题\n捐赠支持\n#\n视频教程\n\n若依框架系列视频教程（RuoYi-Vue \n(opens new window)\n前后端分离版本）。捐赠299元即可获得。\n\n1、视频教程（共128节）\n2、赠送开发文档源码\n3、购买后永久有效，课程不定时更新。\n\nPS: 教程内容只是对已有的代码进行讲解，不是从0开始搭建。请知悉~\n\n如需RuoYi前端不分离版本教程 点这里\n如需RuoYi-Cloud微服务版本版本教程 点这里\n\n付款后联系群主QQ：1429080 \n(opens new window)\n。\n\n提示\n\n您也可以选择使用微信或支付宝捐赠支持 朕要捐赠支持\n\n提示\n\n腾讯QQ有时会收不到好友申请验证，联系不上参考如下解决方案\n1、发送临时消息：点我发送\n(opens new window)\n\n2、发送邮件给我1429080@qq.com（附上QQ号码，我联系你）\n\n教程内容     \n├── 01 项目概述\n├── 02 项目运行\n├── 03 构建发布到Linux\n├── 04 系统菜单介绍\n├── 05 开发环境运行\n├── 06 表结构介绍\n├── 07 目录文件介绍\n├── 08 主配置文件介绍\n├── 09 Spring Boot 简介\n├── 10 Spring Security 简介\n├── 11 Spring Security 配置介绍\n├── 12 Spring Security 密码加密\n├── 13 Spring Security 退出配置\n├── 14 Spring Security 登录配置\n├── 15 Spring Security 权限讲解\n├── 16 Spring Security 权限注解\n├── 17 JWT 介绍\n├── 18 JWT 实现\n├── 19 JWT 过滤器\n├── 20 Mybatis配置详解\n├── 21 Mybatis使用方式\n├── 22 分页配置详解\n├── 23 分页插件使用\n├── 24 分页代码详解\n├── 25 数据源配置详解\n├── 26 数据源代码详解\n├── 27 多数据源使用\n├── 28 新增多数据源（相同数据库）\n├── 29 新增多数据源（不同数据库）\n├── 30 多数据源代码详解\n├── 31 事务简介\n├── 32 事务使用\n├── 33 登录日志\n├── 34 操作日志详解\n├── 35 操作日志实现\n├── 36 数据权限使用详解\n├── 37 数据权限代码详解\n├── 38 数据权限业务实现\n├── 39 代码生成使用（单表）\n├── 40 代码生成使用（树表）\n├── 41 代码生成实现详解\n├── 42 定时任务使用详解\n├── 43 定时任务代码详解\n├── 44 服务监控讲解\n├── 45 系统接口使用详解\n├── 46 系统接口实现详解\n├── 47 XSS脚本过滤详解\n├── 48 防止重复提交过滤详解\n├── 49 全局异常处理器\n├── 50 框架验证详解\n├── 51 日志配置详解\n├── 52 上传详解\n├── 53 下载详解\n├── 54 前端框架介绍\n├── 55 package.json详解\n├── 56 vue.config.js详解\n├── 57 main.js详解\n├── 58 布局设置\n├── 59 导航栏\n├── 60 侧边栏\n├── 61 侧边栏默认展开\n├── 62 顶部栏\n├── 63 scoped作用域\n├── 64 scoped样式穿透\n├── 65 路由跳转的两种方式\n├── 66 动态路由的跳转方式\n├── 67 开发规范&流程\n├── 68 请求流程\n├── 69 引入依赖\n├── 70 注册组件\n├── 71 组件通信\n├── 72 页面权限\n├── 73 多级目录\n├── 74 页签缓存\n├── 75 使用图标\n├── 76 使用字典\n├── 77 使用字典（dicts方式）\n├── 78 使用参数\n├── 79 Postman测试接口\n├── 80 代码单元测试\n├── 81 开发文档介绍和部署\n├── 82 集成Oauth2.0\n├── 83 构建发布到Tomcat\n├── 84 2.3版本更新介绍\n├── 85 新建业务模块（多模块）\n├── 86 开发自己的业务（多模块）\n├── 87 3.0版本更新介绍\n├── 88 文件上传（前端）\n├── 89 文件下载（前端）\n├── 90 配置后端接口地址或域名\n├── 91 3.1版本更新介绍\n├── 92 部署应用到子路径\n├── 93 3.2版本更新介绍\n├── 94 禁止多终端同时登录实现\n├── 95 3.2.1版本更新介绍\n├── 96 静态资源整合到后端访问\n├── 97 3.3.0版本更新介绍\n├── 98 使用加密方式传输密码\n├── 99 多数据源事务的一致性\n├── 100 主子表代码生成详解\n├── 101 3.4.0版本更新介绍\n├── 102 使用undertow容器\n├── 103 实现优雅关闭应用\n├── 104 实现swagger文档增强\n├── 105 实现excel表格增强\n├── 106 实现mybatis增强\n├── 107 实现离线IP地址定位\n├── 108 实现数据库密码加密\n├── 109 实现滑块验证码\n├── 110 实现分库分表\n├── 111 3.5.0版本更新介绍\n├── 112 使用docker实现一键部署\n├── 113 3.6.0版本更新介绍\n├── 114 限流控制详解\n├── 115 3.7.0版本更新介绍\n├── 116 3.8.0版本更新介绍\n├── 117 3.8.1版本更新介绍\n├── 118 3.8.2版本更新介绍\n├── 119 实现分布式文件存储\n├── 120 实现页面添加水印\n├── 121 3.8.3版本更新介绍\n├── 122 3.8.4版本更新介绍\n├── 123 实现第三方授权登录\n├── 124 实现多数据源增强\n├── 125 3.8.5版本更新介绍\n├── 126 实现ehcache本地缓存\n├── 127 3.8.6版本更新介绍\n├── 128 实现exe应用程序启动\n~~\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n\n\n← 项目扩展\n更新日志 →"
  },
  {
    "html": "RuoYi\n文档分离版微服务版移动端版💖赞助💖\n生态系统 \nGitHub \n(opens new window)\nGitee \n(opens new window)\n\n\n\n文档\n\n介绍\n快速了解\n环境部署\n项目介绍\n后台手册\n前端手册\n通用方法\n$tab对象\n$modal对象\n$auth对象\n$cache对象\n$download对象\n开发规范\n新增 view\n新增 api\n新增组件\n新增样式\n请求流程\n交互流程\n请求示例\n引入依赖\n路由使用\n路由配置\n静态路由\n动态路由\n常用方法\n组件使用\n局部注册\n全局注册\n创建使用\n组件通信\n权限使用\n多级目录\n页签缓存\n使用图标\n使用方式\n改变颜色\n使用字典\n使用参数\n异常处理\n应用路径\n内容复制\n组件文档\n插件集成\n项目扩展\n视频教程\n更新日志\n\n其它\n\n常见问题\n捐赠支持\n#\n前端手册\n#\n通用方法\n#\n$tab对象\n\n$tab对象用于做页签操作、刷新页签、关闭页签、打开页签、修改页签等，它定义在plugins/tab.js文件中，它有如下方法\n\n打开页签\nthis.$tab.openPage(\"用户管理\", \"/system/user\");\n\nthis.$tab.openPage(\"用户管理\", \"/system/user\").then(() => {\n  // 执行结束的逻辑\n})\n\n1\n2\n3\n4\n5\n\n修改页签\nconst obj = Object.assign({}, this.$route, { title: \"自定义标题\" }) \nthis.$tab.updatePage(obj);\n\nthis.$tab.updatePage(obj).then(() => {\n  // 执行结束的逻辑\n})\n\n1\n2\n3\n4\n5\n6\n\n关闭页签\n// 关闭当前tab页签，打开新页签\nconst obj = { path: \"/system/user\" };\nthis.$tab.closeOpenPage(obj);\n\n// 关闭当前页签，回到首页\nthis.$tab.closePage();\n\n// 关闭指定页签\nconst obj = { path: \"/system/user\", name: \"User\" };\nthis.$tab.closePage(obj);\n\nthis.$tab.closePage(obj).then(() => {\n  // 执行结束的逻辑\n})\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n刷新页签\n// 刷新当前页签\nthis.$tab.refreshPage();\n\n// 刷新指定页签\nconst obj = { path: \"/system/user\", name: \"User\" };\nthis.$tab.refreshPage(obj);\n\nthis.$tab.refreshPage(obj).then(() => {\n  // 执行结束的逻辑\n})\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n关闭所有页签\nthis.$tab.closeAllPage();\n\nthis.$tab.closeAllPage().then(() => {\n  // 执行结束的逻辑\n})\n\n1\n2\n3\n4\n5\n\n关闭左侧页签\nthis.$tab.closeLeftPage();\n\nconst obj = { path: \"/system/user\", name: \"User\" };\nthis.$tab.closeLeftPage(obj);\n\nthis.$tab.closeLeftPage(obj).then(() => {\n  // 执行结束的逻辑\n})\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n关闭右侧页签\nthis.$tab.closeRightPage();\n\nconst obj = { path: \"/system/user\", name: \"User\" };\nthis.$tab.closeRightPage(obj);\n\nthis.$tab.closeRightPage(obj).then(() => {\n  // 执行结束的逻辑\n})\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n关闭其他tab页签\nthis.$tab.closeOtherPage();\n\nconst obj = { path: \"/system/user\", name: \"User\" };\nthis.$tab.closeOtherPage(obj);\n\nthis.$tab.closeOtherPage(obj).then(() => {\n  // 执行结束的逻辑\n})\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n#\n$modal对象\n\n$modal对象用于做消息提示、通知提示、对话框提醒、二次确认、遮罩等，它定义在plugins/modal.js文件中，它有如下方法\n\n提供成功、警告和错误等反馈信息\nthis.$modal.msg(\"默认反馈\");\nthis.$modal.msgError(\"错误反馈\");\nthis.$modal.msgSuccess(\"成功反馈\");\nthis.$modal.msgWarning(\"警告反馈\");\n\n1\n2\n3\n4\n\n提供成功、警告和错误等提示信息\nthis.$modal.alert(\"默认提示\");\nthis.$modal.alertError(\"错误提示\");\nthis.$modal.alertSuccess(\"成功提示\");\nthis.$modal.alertWarning(\"警告提示\");\n\n1\n2\n3\n4\n\n提供成功、警告和错误等通知信息\nthis.$modal.notify(\"默认通知\");\nthis.$modal.notifyError(\"错误通知\");\nthis.$modal.notifySuccess(\"成功通知\");\nthis.$modal.notifyWarning(\"警告通知\");\n\n1\n2\n3\n4\n\n提供确认窗体信息\nthis.$modal.confirm('确认信息').then(function() {\n  ...\n}).then(() => {\n  ...\n}).catch(() => {});\n\n1\n2\n3\n4\n5\n\n提供遮罩层信息\n// 打开遮罩层\nthis.$modal.loading(\"正在导出数据，请稍后...\");\n\n// 关闭遮罩层\nthis.$modal.closeLoading();\n\n1\n2\n3\n4\n5\n\n#\n$auth对象\n\n$auth对象用于验证用户是否拥有某（些）权限或角色，它定义在plugins/auth.js文件中，它有如下方法\n\n验证用户权限\n// 验证用户是否具备某权限\nthis.$auth.hasPermi(\"system:user:add\");\n// 验证用户是否含有指定权限，只需包含其中一个\nthis.$auth.hasPermiOr([\"system:user:add\", \"system:user:update\"]);\n// 验证用户是否含有指定权限，必须全部拥有\nthis.$auth.hasPermiAnd([\"system:user:add\", \"system:user:update\"]);\n\n1\n2\n3\n4\n5\n6\n\n验证用户角色\n// 验证用户是否具备某角色\nthis.$auth.hasRole(\"admin\");\n// 验证用户是否含有指定角色，只需包含其中一个\nthis.$auth.hasRoleOr([\"admin\", \"common\"]);\n// 验证用户是否含有指定角色，必须全部拥有\nthis.$auth.hasRoleAnd([\"admin\", \"common\"]);\n\n1\n2\n3\n4\n5\n6\n\n#\n$cache对象\n\n$cache对象用于处理缓存。我们并不建议您直接使用sessionStorage或localStorage，因为项目的缓存策略可能发生变化，通过$cache对象做一层调用代理则是一个不错的选择。$cache提供session和local两种级别的缓存，如下：\n\n对象名称\t缓存类型\nsession\t会话级缓存，通过sessionStorage实现\nlocal\t本地级缓存，通过localStorage实现\n\n示例\n\n// local 普通值\nthis.$cache.local.set('key', 'local value')\nconsole.log(this.$cache.local.get('key')) // 输出'local value'\n\n// session 普通值\nthis.$cache.session.set('key', 'session value')\nconsole.log(this.$cache.session.get('key')) // 输出'session value'\n\n// local JSON值\nthis.$cache.local.setJSON('jsonKey', { localProp: 1 })\nconsole.log(this.$cache.local.getJSON('jsonKey')) // 输出'{localProp: 1}'\n\n// session JSON值\nthis.$cache.session.setJSON('jsonKey', { sessionProp: 1 })\nconsole.log(this.$cache.session.getJSON('jsonKey')) // 输出'{sessionProp: 1}'\n\n// 删除值\nthis.$cache.local.remove('key')\nthis.$cache.session.remove('key')\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n#\n$download对象\n\n$download对象用于文件下载，它定义在plugins/download.js文件中，它有如下方法\n\n根据名称下载download路径下的文件\nconst name = \"be756b96-c8b5-46c4-ab67-02e988973090.xlsx\";\nconst isDelete = true;\n\n// 默认下载方法\nthis.$download.name(name);\n\n// 下载完成后是否删除文件\nthis.$download.name(name, isDelete);\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n根据名称下载upload路径下的文件\nconst resource = \"/profile/upload/2021/09/27/be756b96-c8b5-46c4-ab67-02e988973090.png\";\n\n// 默认方法\nthis.$download.resource(resource);\n\n1\n2\n3\n4\n\n根据请求地址下载zip包\nconst url = \"/tool/gen/batchGenCode?tables=\" + tableNames;\nconst name = \"ruoyi\";\n\n// 默认方法\nthis.$download.zip(url, name);\n\n1\n2\n3\n4\n5\n\n更多文件下载操作\n// 自定义文本保存\nvar blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\nthis.$download.saveAs(blob, \"hello world.txt\");\n\n// 自定义文件保存\nvar file = new File([\"Hello, world!\"], \"hello world.txt\", {type: \"text/plain;charset=utf-8\"});\nthis.$download.saveAs(file);\n\n// 自定义data数据保存\nconst blob = new Blob([data], { type: 'text/plain;charset=utf-8' })\nthis.$download.saveAs(blob, name)\n\n// 根据地址保存文件\nthis.$download.saveAs(\"https://ruoyi.vip/images/logo.png\", \"logo.jpg\");\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n#\n开发规范\n#\n新增 view\n\n在 @/views \n(opens new window)\n文件下 创建对应的文件夹，一般性一个路由对应一个文件， 该模块下的功能就建议在本文件夹下创建一个新文件夹，各个功能模块维护自己的utils或components组件。\n\n#\n新增 api\n\n在 @/api \n(opens new window)\n文件夹下创建本模块对应的 api 服务。\n\n#\n新增组件\n\n在全局的 @/components \n(opens new window)\n写一些全局的组件，如富文本，各种搜索组件，封装的分页组件等等能被公用的组件。 每个页面或者模块特定的业务组件则会写在当前 @/views \n(opens new window)\n下面。\n如：@/views/system/user/components/xxx.vue。这样拆分大大减轻了维护成本。\n\n#\n新增样式\n\n页面的样式和组件是一个道理，全局的 @/style \n(opens new window)\n放置一下全局公用的样式，每一个页面的样式就写在当前 views下面，请记住加上scoped 就只会作用在当前组件内了，避免造成全局的样式污染。\n\n/* 编译前 */\n.example {\n  color: red;\n}\n\n/* 编译后 */\n.example[_v-f3f3eg9] {\n  color: red;\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n#\n请求流程\n#\n交互流程\n\n一个完整的前端 UI 交互到服务端处理流程是这样的：\n\nUI 组件交互操作；\n调用统一管理的 api service 请求函数；\n使用封装的 request.js 发送请求；\n获取服务端返回；\n更新 data；\n\n为了方便管理维护，统一的请求处理都放在 @/src/api \n(opens new window)\n文件夹中，并且一般按照 model 维度进行拆分文件，如：\n\napi/\n  system/\n    user.js\n    role.js\n  monitor/\n    operlog.js\n\tlogininfor.js\n  ...\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n提示\n\n其中，@/src/utils/request.js \n(opens new window)\n是基于 axios 的封装，便于统一处理 POST，GET 等请求参数，请求头，以及错误提示信息等。 它封装了全局request拦截器、response拦截器、统一的错误处理、统一做了超时处理、baseURL设置等。\n\n#\n请求示例\n// api/system/user.js\nimport request from '@/utils/request'\n\n// 查询用户列表\nexport function listUser(query) {\n  return request({\n    url: '/system/user/list',\n    method: 'get',\n    params: query\n  })\n}\n\n// views/system/user/index.vue\nimport { listUser } from \"@/api/system/user\";\n\nexport default {\n  data() {\n    userList: null,\n    loading: true\n  },\n  methods: {\n    getList() {\n      this.loading = true\n      listUser().then(response => {\n        this.userList = response.rows\n        this.loading = false\n      })\n    }\n  }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n提示\n\n如果有不同的baseURL，直接通过覆盖的方式，让它具有不同的baseURL。\n\nexport function listUser(query) {\n  return request({\n    url: '/system/user/list',\n    method: 'get',\n    params: query,\n    baseURL: process.env.BASE_API\n  })\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n#\n引入依赖\n\n除了 element-ui 组件以及脚手架内置的业务组件，有时我们还需要引入其他外部组件，这里以引入 vue-count-to \n(opens new window)\n为例进行介绍。\n\n在终端输入下面的命令完成安装：\n\n$ npm install vue-count-to --save\n\n1\n\n\n加上 --save 参数会自动添加依赖到 package.json 中去。\n\n\n\n#\n路由使用\n\n框架的核心是通过路由自动生成对应导航，所以除了路由的基本配置，还需要了解框架提供了哪些配置项。\n\n#\n路由配置\n// 当设置 true 的时候该路由不会在侧边栏出现 如401，login等页面，或者如一些编辑页面/edit/1\nhidden: true // (默认 false)\n\n//当设置 noRedirect 的时候该路由在面包屑导航中不可被点击\nredirect: 'noRedirect'\n\n// 当你一个路由下面的 children 声明的路由大于1个时，自动会变成嵌套的模式--如组件页面\n// 只有一个时，会将那个子路由当做根路由显示在侧边栏--如引导页面\n// 若你想不管路由下面的 children 声明的个数都显示你的根路由\n// 你可以设置 alwaysShow: true，这样它就会忽略之前定义的规则，一直显示根路由\nalwaysShow: true\n\nname: 'router-name' // 设定路由的名字，一定要填写不然使用<keep-alive>时会出现各种问题\nquery: '{\"id\": 1, \"name\": \"ry\"}'     // 访问路由的默认传递参数\nroles: ['admin', 'common']           // 访问路由的角色权限\npermissions: ['a:a:a', 'b:b:b']      // 访问路由的菜单权限\n \nmeta: {\n  title: 'title' // 设置该路由在侧边栏和面包屑中展示的名字\n  icon: 'svg-name' // 设置该路由的图标，支持 svg-class，也支持 el-icon-x element-ui 的 icon\n  noCache: true // 如果设置为true，则不会被 <keep-alive> 缓存(默认 false)\n  breadcrumb: false //  如果设置为false，则不会在breadcrumb面包屑中显示(默认 true)\n  affix: true // 如果设置为true，它则会固定在tags-view中(默认 false)\n\n  // 当路由设置了该属性，则会高亮相对应的侧边栏。\n  // 这在某些场景非常有用，比如：一个文章的列表页路由为：/article/list\n  // 点击文章进入文章详情页，这时候路由为/article/1，但你想在侧边栏高亮文章列表的路由，就可以进行如下设置\n  activeMenu: '/article/list'\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n普通示例\n\n{\n  path: '/system/test',\n  component: Layout,\n  redirect: 'noRedirect',\n  hidden: false,\n  alwaysShow: true,\n  meta: { title: '系统管理', icon : \"system\" },\n  children: [{\n    path: 'index',\n    component: (resolve) => require(['@/views/index'], resolve),\n    name: 'Test',\n    meta: {\n      title: '测试管理',\n      icon: 'user'\n    }\n  }]\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n外链示例\n\n{\n  path: 'http://ruoyi.vip',\n  meta: { title: '若依官网', icon : \"guide\" }\n}\n\n1\n2\n3\n4\n\n#\n静态路由\n\n代表那些不需要动态判断权限的路由，如登录页、404、等通用页面，在@/router/index.js \n(opens new window)\n配置对应的公共路由。\n\n#\n动态路由\n\n代表那些需要根据用户动态判断权限并通过addRoutes动态添加的页面，在@/store/modules/permission.js \n(opens new window)\n加载后端接口路由配置。\n\n提示\n\n动态路由可以在系统管理-菜单管理进行新增和修改操作，前端加载会自动请求接口获取菜单信息并转换成前端对应的路由。\n动态路由在生产环境下会默认使用路由懒加载，实现方式参考loadView方法的判断。\n#\n常用方法\n\n想要跳转到不同的页面，使用router.push方法\n\nthis.$router.push({ path: \"/system/user\" });\n\n1\n\n\n跳转页面并设置请求参数，使用query属性\n\nthis.$router.push({ path: \"/system/user\", query: {id: \"1\", name: \"若依\"} });\n\n1\n\n\n更多使用可以参考vue-router \n(opens new window)\n官方文档。\n\n#\n组件使用\n\nvue 注册组件的两种方式\n\n#\n局部注册\n\n在对应页使用components注册组件。\n\n<template>\n  <count-to :startVal='startVal' :endVal='endVal' :duration='3000'></count-to>\n</template>\n\n<script>\nimport countTo from 'vue-count-to';\nexport default {\n  components: { countTo },\n  data () {\n    return {\n      startVal: 0,\n      endVal: 2020\n    }\n  }\n}\n</script>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n#\n全局注册\n\n在 @/main.js \n(opens new window)\n文件下注册组件。\n\nimport countTo from 'vue-count-to'\nVue.component('countTo', countTo)\n\n1\n2\n\n<template>\n  <count-to :startVal='startVal' :endVal='endVal' :duration='3000'></count-to>\n</template>\n\n1\n2\n3\n\n#\n创建使用\n\n可以通过创建一个后缀名为vue的文件，在通过components进行注册即可。\n\n例如定义一个a.vue文件\n\n<!-- 子组件 -->\n<template>\n  <div>这是a组件</div>\n</template>\n\n1\n2\n3\n4\n\n\n在其他组件中导入并注册\n\n<!-- 父组件 -->\n<template>\n  <div style=\"text-align: center; font-size: 20px\">\n    测试页面\n    <testa></testa>\n  </div>\n</template>\n\n<script>\nimport a from \"./a\";\nexport default {\n  components: { testa: a }\n};\n</script>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n#\n组件通信\n\n通过props来接收外界传递到组件内部的值\n\n<!-- 父组件 -->\n<template>\n  <div style=\"text-align: center; font-size: 20px\">\n    测试页面\n    <testa :name=\"name\"></testa>\n  </div>\n</template>\n\n<script>\nimport a from \"./a\";\nexport default {\n  components: { testa: a },\n  data() {\n    return {\n      name: \"若依\"\n    };\n  },\n};\n</script>\n\n<!-- 子组件 -->\n<template>\n  <div>这是a组件 name:{{ name }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    name: {\n      type: String,\n      default: \"\"\n    },\n  }\n};\n</script>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n使用$emit监听子组件触发的事件\n\n<!-- 父组件 -->\n<template>\n  <div style=\"text-align: center; font-size: 20px\">\n    测试页面\n    <testa :name=\"name\" @ok=\"ok\"></testa>\n    子组件传来的值 : {{ message }}\n  </div>\n</template>\n\n<script>\nimport a from \"./a\";\nexport default {\n  components: { testa: a },\n  data() {\n    return {\n      name: \"若依\",\n      message: \"\"\n    };\n  },\n  methods: {\n    ok(message) {\n      this.message = message;\n    },\n  },\n};\n</script>\n\n<!-- 子组件 -->\n<template>\n  <div>\n    这是a组件 name:{{ name }}\n    <button @click=\"click\">发送</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    name: {\n      type: String,\n      default: \"\"\n    },\n  },\n  data() {\n    return {\n      message: \"我是来自子组件的消息\"\n    };\n  },\n  methods: {\n    click() {\n      this.$emit(\"ok\", this.message);\n    },\n  },\n};\n</script>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n#\n权限使用\n\n封装了一个指令权限，能简单快速的实现按钮级别的权限判断。v-permission\n(opens new window)\n\n使用权限字符串 v-hasPermi\n\n// 单个\n<el-button v-hasPermi=\"['system:user:add']\">存在权限字符串才能看到</el-button>\n// 多个\n<el-button v-hasPermi=\"['system:user:add', 'system:user:edit']\">包含权限字符串才能看到</el-button>\n\n1\n2\n3\n4\n\n\n使用角色字符串 v-hasRole\n\n// 单个\n<el-button v-hasRole=\"['admin']\">管理员才能看到</el-button>\n// 多个\n<el-button v-hasRole=\"['role1', 'role2']\">包含角色才能看到</el-button>\n\n1\n2\n3\n4\n\n\n提示\n\n在某些情况下，它是不适合使用v-hasPermi，如元素标签组件，只能通过手动设置v-if。 可以使用全局权限判断函数，用法和指令 v-hasPermi 类似。\n\n<template>\n  <el-tabs>\n    <el-tab-pane v-if=\"checkPermi(['system:user:add'])\" label=\"用户管理\" name=\"user\">用户管理</el-tab-pane>\n    <el-tab-pane v-if=\"checkPermi(['system:user:add', 'system:user:edit'])\" label=\"参数管理\" name=\"menu\">参数管理</el-tab-pane>\n    <el-tab-pane v-if=\"checkRole(['admin'])\" label=\"角色管理\" name=\"role\">角色管理</el-tab-pane>\n    <el-tab-pane v-if=\"checkRole(['admin','common'])\" label=\"定时任务\" name=\"job\">定时任务</el-tab-pane>\n   </el-tabs>\n</template>\n\n<script>\nimport { checkPermi, checkRole } from \"@/utils/permission\"; // 权限判断函数\n\nexport default{\n   methods: {\n    checkPermi,\n    checkRole\n  }\n}\n</script>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n前端有了鉴权后端还需要鉴权吗？\n\n前端的鉴权只是一个辅助功能，对于专业人员这些限制都是可以轻松绕过的，为保证服务器安全，无论前端是否进行了权限校验，后端接口都需要对会话请求再次进行权限校验！\n\n#\n多级目录\n\n如果你的路由是多级目录，有三级路由嵌套的情况下，还需要手动在二级目录的根文件下添加一个 <router-view>。\n\n如：@/views/system/log/index.vue \n(opens new window)\n，原则上有多少级路由嵌套就需要多少个<router-view>。\n\n\n\n\n提示\n\n最新版本多级目录已经支持自动配置组件，无需添加<router-view>。\n\n#\n页签缓存\n\n由于目前 keep-alive 和 router-view 是强耦合的，而且查看文档和源码不难发现 keep-alive 的 include \n(opens new window)\n默认是优先匹配组件的 name ，所以在编写路由 router 和路由对应的 view component 的时候一定要确保 两者的 name 是完全一致的。(切记 name 命名时候尽量保证唯一性 切记不要和某些组件的命名重复了，不然会递归引用最后内存溢出等问题)\n\nDEMO:\n\n//router 路由声明\n{\n  path: 'config',\n  component: ()=>import('@/views/system/config/index'),\n  name: 'Config',\n  meta: { title: '参数设置', icon: 'edit' }\n}\n\n1\n2\n3\n4\n5\n6\n7\n\n//路由对应的view  system/config/index\nexport default {\n  name: 'Config'\n}\n\n1\n2\n3\n4\n\n\n一定要保证两者的名字相同，切记写重或者写错。默认如果不写 name 就不会被缓存，详情见issue \n(opens new window)\n。\n\n提示\n\n在系统管理-菜单管理-可以配置菜单页签是否缓存，默认为缓存\n\n#\n使用图标\n\n全局 Svg Icon 图标组件。\n\n默认在 @/icons/index.js \n(opens new window)\n中注册到全局中，可以在项目中任意地方使用。所以图标均可在 @/icons/svg \n(opens new window)\n。可自行添加或者删除图标，所以图标都会被自动导入，无需手动操作。\n\n#\n使用方式\n<!-- icon-class 为 icon 的名字; class-name 为 icon 自定义 class-->\n<svg-icon icon-class=\"password\"  class-name='custom-class' />\n\n1\n2\n\n#\n改变颜色\n\nsvg-icon 默认会读取其父级的 color fill: currentColor;\n\n你可以改变父级的color或者直接改变fill的颜色即可。\n\n提示\n\n如果你是从 iconfont \n(opens new window)\n下载的图标，记得使用如 Sketch 等工具规范一下图标的大小问题，不然可能会造成项目中的图标大小尺寸不统一的问题。 本项目中使用的图标都是 128*128 大小规格的。\n\n#\n使用字典\n\n字典管理是用来维护数据类型的数据，如下拉框、单选按钮、复选框、树选择的数据，方便系统管理员维护。主要功能包括：字典分类管理、字典数据管理\n\n大于3.7.0版本使用如下方法\n\n1、main.js中引入全局变量和方法（已有）\n\nimport DictData from '@/components/DictData'\nDictData.install()\n\n1\n2\n\n\n2、加载数据字典，可以是多个。\n\nexport default {\n  dicts: ['字典类型'],\n  ...\n...\n\n1\n2\n3\n4\n\n\n3、读取数据字典\n\n<el-option\n  v-for=\"dict in dict.type.字典类型\"\n  :key=\"dict.value\"\n  :label=\"dict.label\"\n  :value=\"dict.value\"\n/>\n\n1\n2\n3\n4\n5\n6\n\n\n4、翻译数据字典\n\n// 字典标签组件翻译\n<el-table-column label=\"名称\" align=\"center\" prop=\"name\">\n  <template slot-scope=\"scope\">\n    <dict-tag :options=\"dict.type.字典类型\" :value=\"scope.row.name\"/>\n  </template>\n</el-table-column>\n\n// 自定义方法翻译\n{{ xxxxFormat(form) }}\n\nxxxxFormat(row, column) {\n  return this.selectDictLabel(this.dict.type.字典类型, row.name);\n},\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n5、其他类型\n\n// 单个\n<dict-tag :options=\"sys_user_sex\" value=\"1\"></dict-tag>\n// 多个\n<dict-tag :options=\"sys_user_sex\" value=\"1,2\"></dict-tag>\n// 自定义分隔符\n<dict-tag :options=\"sys_user_sex\" value=\"0;1\" separator=\";\"></dict-tag>\n// 数组\n<dict-tag :options=\"sys_user_sex\" :value=\"[1,2]\"></dict-tag>\n// 是否当未找到匹配的数据时，显示原值value\n<dict-tag :options=\"sys_user_sex\" :value=\"[1,2,3,4,5]\" :show-value=\"false\"></dict-tag>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n小于3.7.0版本使用如下方法\n\n1、main.js中引入全局变量和方法（已有）\n\nimport { getDicts } from \"@/api/system/dict/data\";\nVue.prototype.getDicts = getDicts\n\n1\n2\n\n\n2、加载数据字典\n\nexport default {\n  data() {\n    return {\n      xxxxxOptions: [],\n      .....\n...\n\ncreated() {\n  this.getDicts(\"字典类型\").then(response => {\n    this.xxxxxOptions = response.data;\n  });\n},\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n3、读取数据字典\n\n<el-option\n  v-for=\"dict in xxxxxOptions\"\n  :key=\"dict.dictValue\"\n  :label=\"dict.dictLabel\"\n  :value=\"dict.dictValue\"\n/>\n\n1\n2\n3\n4\n5\n6\n\n\n4、翻译数据字典\n\n// 字典标签组件翻译\n<el-table-column label=\"名称\" align=\"center\" prop=\"name\">\n  <template slot-scope=\"scope\">\n    <dict-tag :options=\"xxxxxOptions\" :value=\"scope.row.name\"/>\n  </template>\n</el-table-column>\n\n// 自定义方法翻译\n{{ xxxxFormat(form) }}\n\nxxxxFormat(row, column) {\n  return this.selectDictLabel(this.xxxxxOptions, row.name);\n},\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n#\n使用参数\n\n参数设置是提供开发人员、实施人员的动态系统配置参数，不需要去频繁修改后台配置文件，也无需重启服务器即可生效。\n\n1、main.js中引入全局变量和方法（已有）\n\nimport { getConfigKey } from \"@/api/system/config\";\nVue.prototype.getConfigKey = getConfigKey\n\n1\n2\n\n\n2、页面使用参数\n\nthis.getConfigKey(\"参数键名\").then(response => {\n  this.xxxxx = response.msg;\n});\n\n1\n2\n3\n\n#\n异常处理\n\n@/utils/request.js 是基于 axios 的封装，便于统一处理 POST，GET 等请求参数，请求头，以及错误提示信息等。它封装了全局 request拦截器、response拦截器、统一的错误处理、统一做了超时处理、baseURL设置等。 如果有自定义错误码可以在errorCode.js中设置对应key value值。\n\nimport axios from 'axios'\nimport { Notification, MessageBox, Message } from 'element-ui'\nimport store from '@/store'\nimport { getToken } from '@/utils/auth'\nimport errorCode from '@/utils/errorCode'\nimport { tansParams } from \"@/utils/ruoyi\";\n\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8'\n// 创建axios实例\nconst service = axios.create({\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\n  baseURL: process.env.VUE_APP_BASE_API,\n  // 超时\n  timeout: 10000\n})\n// request拦截器\nservice.interceptors.request.use(config => {\n  // 是否需要设置 token\n  const isToken = (config.headers || {}).isToken === false\n  if (getToken() && !isToken) {\n    config.headers['Authorization'] = 'Bearer ' + getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n  return config\n}, error => {\n    console.log(error)\n    Promise.reject(error)\n})\n\n// 响应拦截器\nservice.interceptors.response.use(res => {\n    // 未设置状态码则默认成功状态\n    const code = res.data.code || 200;\n    // 获取错误信息\n    const msg = errorCode[code] || res.data.msg || errorCode['default']\n    if (code === 401) {\n      MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n          confirmButtonText: '重新登录',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }\n      ).then(() => {\n        store.dispatch('LogOut').then(() => {\n          location.href = '/index';\n        })\n      })\n    } else if (code === 500) {\n      Message({\n        message: msg,\n        type: 'error'\n      })\n      return Promise.reject(new Error(msg))\n    } else if (code !== 200) {\n      Notification.error({\n        title: msg\n      })\n      return Promise.reject('error')\n    } else {\n      return res.data\n    }\n  },\n  error => {\n    console.log('err' + error)\n    let { message } = error;\n    if (message == \"Network Error\") {\n      message = \"后端接口连接异常\";\n    }\n    else if (message.includes(\"timeout\")) {\n      message = \"系统接口请求超时\";\n    }\n    else if (message.includes(\"Request failed with status code\")) {\n      message = \"系统接口\" + message.substr(message.length - 3) + \"异常\";\n    }\n    Message({\n      message: message,\n      type: 'error',\n      duration: 5 * 1000\n    })\n    return Promise.reject(error)\n  }\n)\n\n// 通用下载方法\nexport function download(url, params, filename) {\n  return service.post(url, params, {\n    transformRequest: [(params) => {\n      return tansParams(params)\n    }],\n    responseType: 'blob'\n  }).then((data) => {\n    const content = data\n    const blob = new Blob([content])\n    if ('download' in document.createElement('a')) {\n      const elink = document.createElement('a')\n      elink.download = filename\n      elink.style.display = 'none'\n      elink.href = URL.createObjectURL(blob)\n      document.body.appendChild(elink)\n      elink.click()\n      URL.revokeObjectURL(elink.href)\n      document.body.removeChild(elink)\n    } else {\n      navigator.msSaveBlob(blob, filename)\n    }\n  }).catch((r) => {\n    console.error(r)\n  })\n}\n\nexport default service\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n\n\n提示\n\n如果有些不需要传递token的请求，可以设置headers中的属性isToken为false\n\nexport function login(username, password, code, uuid) {\n  return request({\n    url: 'xxxx',\n    headers: {\n      isToken: false,\n      // 可以自定义 Authorization\n\t  // 'Authorization': 'Basic d2ViOg=='\n    },\n    method: 'get'\n  })\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n#\n应用路径\n\n有些特殊情况需要部署到子路径下，例如：https://www.ruoyi.vip/admin，可以按照下面流程修改。\n\n1、修改vue.config.js中的publicPath属性\n\npublicPath: process.env.NODE_ENV === \"production\" ? \"/admin/\" : \"/admin/\",\n\n1\n\n\n2、修改router/index.js，添加一行base属性\n\nexport default new Router({\n  base: \"/admin\",\n  mode: 'history', // 去掉url中的#\n  scrollBehavior: () => ({ y: 0 }),\n  routes: constantRoutes\n})\n\n1\n2\n3\n4\n5\n6\n\n\n3、/index路由添加获取子路径/admin\n\n修改layout/components/Navbar.vue中的location.href\n\nlocation.href = '/admin/index';\n\n1\n\n\n修改utils/request.js中的location.href\n\nlocation.href = '/admin/index';\n\n1\n\n\n4、修改nginx配置\n\nlocation /admin {\n\talias   /home/ruoyi/projects/ruoyi-ui;\n\ttry_files $uri $uri/ /admin/index.html;\n\tindex  index.html index.htm;\n}\n\n1\n2\n3\n4\n5\n\n\n打开浏览器，输入：https://www.ruoyi.vip/admin 能正常访问和刷新表示成功。\n\n#\n内容复制\n\n如果要使用复制功能可以使用指令v-clipboard，示例代码。\n\n<el-button\n  v-clipboard:copy=\"content\"\n  v-clipboard:success=\"copySuccess\"\n  v-clipboard:error=\"copyFailed\"\n>复制</el-button>\n\n1\n2\n3\n4\n5\n\n参数\t说明\nv-clipboard:copy\t需要复制的内容\nv-clipboard:cat\t需要剪贴的内容\nv-clipboard:success\t复制成功处理函数\nclipboard:error\t复制失败处理函数\n\n← 后台手册\n组件文档 →"
  },
  {
    "url": "http://doc.ruoyi.vip/ruoyi-vue/document/htsc.html",
    "html": "RuoYi\n文档分离版微服务版移动端版💖赞助💖\n生态系统 \nGitHub \n(opens new window)\nGitee \n(opens new window)\n\n\n\n文档\n\n介绍\n快速了解\n环境部署\n项目介绍\n后台手册\n分页实现\n前端调用实现\n后台逻辑实现\n导入导出\n注解参数说明\n导出实现流程\n导入实现流程\n自定义标题信息\n自定义数据处理器\n自定义隐藏属性列\n导出对象的子列表\n上传下载\n上传实现流程\n下载实现流程\n权限注解\n权限方法\n使用示例\n公开接口\n事务管理\n异常处理\n参数验证\n系统日志\n数据权限\n多数据源\n代码生成\n定时任务\n系统接口\n防重复提交\n国际化支持\n后台国际化流程\n前端国际化流程\n新建子模块\n前端手册\n组件文档\n插件集成\n项目扩展\n视频教程\n更新日志\n\n其它\n\n常见问题\n捐赠支持\n#\n后台手册\n#\n分页实现\n前端基于element封装的分页组件 pagination\n(opens new window)\n后端基于mybatis的轻量级分页插件pageHelper\n(opens new window)\n#\n前端调用实现\n\n1、前端定义分页流程\n\n// 一般在查询参数中定义分页变量\nqueryParams: {\n  pageNum: 1,\n  pageSize: 10\n},\n\n// 页面添加分页组件，传入分页变量\n<pagination\n  v-show=\"total>0\"\n  :total=\"total\"\n  :page.sync=\"queryParams.pageNum\"\n  :limit.sync=\"queryParams.pageSize\"\n  @pagination=\"getList\"\n/>\n\n// 调用后台方法，传入参数 获取结果\nlistUser(this.queryParams).then(response => {\n    this.userList = response.rows;\n    this.total = response.total;\n  }\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n#\n后台逻辑实现\n\n参考后台逻辑实现\n\n#\n导入导出\n\n在实际开发中经常需要使用导入导出功能来加快数据的操作。在项目中可以使用注解来完成此项功能。 在需要被导入导出的实体类属性添加@Excel注解，目前支持参数如下：\n\n#\n注解参数说明\n参数\t类型\t默认值\t描述\nsort\tint\tInteger.MAX_VALUE\t导出时在excel中排序，值越小越靠前\nname\tString\t空\t导出到Excel中的名字\ndateFormat\tString\t空\t日期格式, 如: yyyy-MM-dd\ndictType\tString\t空\t如果是字典类型，请设置字典的type值 (如: sys_user_sex)\nreadConverterExp\tString\t空\t读取内容转表达式 (如: 0=男,1=女,2=未知)\nseparator\tString\t,\t分隔符，读取字符串组内容\nscale\tint\t-1\tBigDecimal 精度 默认:-1(默认不开启BigDecimal格式化)\nroundingMode\tint\tBigDecimal.ROUND_HALF_EVEN\tBigDecimal 舍入规则 默认:BigDecimal.ROUND_HALF_EVEN\ncelltype\tEnum\tType.STRING\t导出类型（0数字 1字符串 2图片）\nheight\tString\t14\t导出时在excel中每个列的高度 单位为字符\nwidth\tString\t16\t导出时在excel中每个列的宽 单位为字符\nsuffix\tString\t空\t文字后缀,如% 90 变成90%\ndefaultValue\tString\t空\t当值为空时,字段的默认值\nprompt\tString\t空\t提示信息\ncombo\tString\tNull\t设置只能选择不能输入的列内容\nheaderBackgroundColor\tEnum\tIndexedColors.GREY_50_PERCENT\t导出列头背景色IndexedColors.XXXX\nheaderColor\tEnum\tIndexedColors.WHITE\t导出列头字体颜色IndexedColors.XXXX\nbackgroundColor\tEnum\tIndexedColors.WHITE\t导出单元格背景色IndexedColors.XXXX\ncolor\tEnum\tIndexedColors.BLACK\t导出单元格字体颜色IndexedColors.XXXX\ntargetAttr\tString\t空\t另一个类中的属性名称,支持多级获取,以小数点隔开\nisStatistics\tboolean\tfalse\t是否自动统计数据,在最后追加一行统计数据总和\ntype\tEnum\tType.ALL\t字段类型（0：导出导入；1：仅导出；2：仅导入）\nalign\tEnum\tHorizontalAlignment.CENTER\t导出对齐方式HorizontalAlignment.XXXX\nhandler\tClass\tExcelHandlerAdapter.class\t自定义数据处理器\nargs\tString[]\t{}\t自定义数据处理器参数\n#\n导出实现流程\n\n1、前端调用方法（参考如下）\n\n// 查询参数 queryParams\nqueryParams: {\n  pageNum: 1,\n  pageSize: 10,\n  userName: undefined\n},\n\n// 导出接口exportUser\nimport { exportUser } from \"@/api/system/user\";\n\n/** 导出按钮操作 */\nhandleExport() {\n  const queryParams = this.queryParams;\n  this.$confirm('是否确认导出所有用户数据项?', \"警告\", {\n\t  confirmButtonText: \"确定\",\n\t  cancelButtonText: \"取消\",\n\t  type: \"warning\"\n\t}).then(function() {\n\t  return exportUser(queryParams);\n\t}).then(response => {\n\t  this.download(response.msg);\n\t}).catch(function() {});\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n2、添加导出按钮事件\n\n<el-button\n  type=\"warning\"\n  icon=\"el-icon-download\"\n  size=\"mini\"\n  @click=\"handleExport\"\n>导出</el-button>\n\n1\n2\n3\n4\n5\n6\n\n\n3、在实体变量上添加@Excel注解\n\n@Excel(name = \"用户序号\", prompt = \"用户编号\")\nprivate Long userId;\n\n@Excel(name = \"用户名称\")\nprivate String userName;\n\t\n@Excel(name = \"用户性别\", readConverterExp = \"0=男,1=女,2=未知\")\nprivate String sex;\n\n@Excel(name = \"用户头像\", cellType = ColumnType.IMAGE)\nprivate String avatar;\n\n@Excel(name = \"帐号状态\", dictType = \"sys_normal_disable\")\nprivate String status;\n\n@Excel(name = \"最后登陆时间\", width = 30, dateFormat = \"yyyy-MM-dd HH:mm:ss\")\nprivate Date loginDate;\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n4、在Controller添加导出方法\n\n\n\n\n\n\n\n\n \n \n\n\n\n@Log(title = \"用户管理\", businessType = BusinessType.EXPORT)\n@PreAuthorize(\"@ss.hasPermi('system:user:export')\")\n@GetMapping(\"/export\")\npublic AjaxResult export(SysUser user)\n{\n\tList<SysUser> list = userService.selectUserList(user);\n\tExcelUtil<SysUser> util = new ExcelUtil<SysUser>(SysUser.class);\n\treturn util.exportExcel(list, \"用户数据\");\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n#\n导入实现流程\n\n1、前端调用方法（参考如下）\n\nimport { getToken } from \"@/utils/auth\";\n\n// 用户导入参数\nupload: {\n  // 是否显示弹出层（用户导入）\n  open: false,\n  // 弹出层标题（用户导入）\n  title: \"\",\n  // 是否禁用上传\n  isUploading: false,\n  // 是否更新已经存在的用户数据\n  updateSupport: 0,\n  // 设置上传的请求头部\n  headers: { Authorization: \"Bearer \" + getToken() },\n  // 上传的地址\n  url: process.env.VUE_APP_BASE_API + \"/system/user/importData\"\n},\n\n// 导入模板接口importTemplate\nimport { importTemplate } from \"@/api/system/user\";\n\n/** 导入按钮操作 */\nhandleImport() {\n  this.upload.title = \"用户导入\";\n  this.upload.open = true;\n},\n/** 下载模板操作 */\nimportTemplate() {\n  importTemplate().then(response => {\n\tthis.download(response.msg);\n  });\n},\n// 文件上传中处理\nhandleFileUploadProgress(event, file, fileList) {\n  this.upload.isUploading = true;\n},\n// 文件上传成功处理\nhandleFileSuccess(response, file, fileList) {\n  this.upload.open = false;\n  this.upload.isUploading = false;\n  this.$refs.upload.clearFiles();\n  this.$alert(response.msg, \"导入结果\", { dangerouslyUseHTMLString: true });\n  this.getList();\n},\n// 提交上传文件\nsubmitFileForm() {\n  this.$refs.upload.submit();\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n2、添加导入按钮事件\n\n<el-button\n  type=\"info\"\n  icon=\"el-icon-upload2\"\n  size=\"mini\"\n  @click=\"handleImport\"\n>导入</el-button>\n\n1\n2\n3\n4\n5\n6\n\n\n3、添加导入前端代码\n\n<!-- 用户导入对话框 -->\n<el-dialog :title=\"upload.title\" :visible.sync=\"upload.open\" width=\"400px\">\n  <el-upload\n\tref=\"upload\"\n\t:limit=\"1\"\n\taccept=\".xlsx, .xls\"\n\t:headers=\"upload.headers\"\n\t:action=\"upload.url + '?updateSupport=' + upload.updateSupport\"\n\t:disabled=\"upload.isUploading\"\n\t:on-progress=\"handleFileUploadProgress\"\n\t:on-success=\"handleFileSuccess\"\n\t:auto-upload=\"false\"\n\tdrag\n  >\n\t<i class=\"el-icon-upload\"></i>\n\t<div class=\"el-upload__text\">\n\t  将文件拖到此处，或\n\t  <em>点击上传</em>\n\t</div>\n\t<div class=\"el-upload__tip\" slot=\"tip\">\n\t  <el-checkbox v-model=\"upload.updateSupport\" />是否更新已经存在的用户数据\n\t  <el-link type=\"info\" style=\"font-size:12px\" @click=\"importTemplate\">下载模板</el-link>\n\t</div>\n\t<div class=\"el-upload__tip\" style=\"color:red\" slot=\"tip\">提示：仅允许导入“xls”或“xlsx”格式文件！</div>\n  </el-upload>\n  <div slot=\"footer\" class=\"dialog-footer\">\n\t<el-button type=\"primary\" @click=\"submitFileForm\">确 定</el-button>\n\t<el-button @click=\"upload.open = false\">取 消</el-button>\n  </div>\n</el-dialog>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n4、在实体变量上添加@Excel注解，默认为导出导入，也可以单独设置仅导入Type.IMPORT\n\n@Excel(name = \"用户序号\")\nprivate Long id;\n\n@Excel(name = \"部门编号\", type = Type.IMPORT)\nprivate Long deptId;\n\n@Excel(name = \"用户名称\")\nprivate String userName;\n\n/** 导出部门多个对象 */\n@Excels({\n\t@Excel(name = \"部门名称\", targetAttr = \"deptName\", type = Type.EXPORT),\n\t@Excel(name = \"部门负责人\", targetAttr = \"leader\", type = Type.EXPORT)\n})\nprivate SysDept dept;\n\n/** 导出部门单个对象 */\n@Excel(name = \"部门名称\", targetAttr = \"deptName\", type = Type.EXPORT)\nprivate SysDept dept;\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n5、在Controller添加导入方法，updateSupport属性为是否存在则覆盖（可选）\n\n@Log(title = \"用户管理\", businessType = BusinessType.IMPORT)\n@PostMapping(\"/importData\")\npublic AjaxResult importData(MultipartFile file, boolean updateSupport) throws Exception\n{\n\tExcelUtil<SysUser> util = new ExcelUtil<SysUser>(SysUser.class);\n\tList<SysUser> userList = util.importExcel(file.getInputStream());\n\tLoginUser loginUser = tokenService.getLoginUser(ServletUtils.getRequest());\n\tString operName = loginUser.getUsername();\n\tString message = userService.importUser(userList, updateSupport, operName);\n\treturn AjaxResult.success(message);\n}\n\n@GetMapping(\"/importTemplate\")\npublic AjaxResult importTemplate()\n{\n\tExcelUtil<SysUser> util = new ExcelUtil<SysUser>(SysUser.class);\n\treturn util.importTemplateExcel(\"用户数据\");\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n提示\n\n也可以直接到main运行此方法测试。\n\nInputStream is = new FileInputStream(new File(\"D:\\\\test.xlsx\"));\nExcelUtil<Entity> util = new ExcelUtil<Entity>(Entity.class);\nList<Entity> userList = util.importExcel(is);\n\n1\n2\n3\n\n#\n自定义标题信息\n\n参考自定义标题信息\n\n#\n自定义数据处理器\n\n参考自定义数据处理器\n\n#\n自定义隐藏属性列\n\n参考自定义隐藏属性列\n\n#\n导出对象的子列表\n\n参考导出对象的子列表\n\n#\n上传下载\n\n首先创建一张上传文件的表，例如：\n\ndrop table if exists sys_file_info;\ncreate table sys_file_info (\n  file_id           int(11)          not null auto_increment       comment '文件id',\n  file_name         varchar(50)      default ''                    comment '文件名称',\n  file_path         varchar(255)     default ''                    comment '文件路径',\n  primary key (file_id)\n) engine=innodb auto_increment=1 default charset=utf8 comment = '文件信息表';\n\n1\n2\n3\n4\n5\n6\n7\n\n#\n上传实现流程\n\n1、el-input修改成el-upload\n\n<el-upload\n  ref=\"upload\"\n  :limit=\"1\"\n  accept=\".jpg, .png\"\n  :action=\"upload.url\"\n  :headers=\"upload.headers\"\n  :file-list=\"upload.fileList\"\n  :on-progress=\"handleFileUploadProgress\"\n  :on-success=\"handleFileSuccess\"\n  :auto-upload=\"false\">\n  <el-button slot=\"trigger\" size=\"small\" type=\"primary\">选取文件</el-button>\n  <el-button style=\"margin-left: 10px;\" size=\"small\" type=\"success\" :loading=\"upload.isUploading\" @click=\"submitUpload\">上传到服务器</el-button>\n  <div slot=\"tip\" class=\"el-upload__tip\">只能上传jpg/png文件，且不超过500kb</div>\n</el-upload>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n2、引入获取token\n\nimport { getToken } from \"@/utils/auth\";\n\n1\n\n\n3、data中添加属性\n\n// 上传参数\nupload: {\n  // 是否禁用上传\n  isUploading: false,\n  // 设置上传的请求头部\n  headers: { Authorization: \"Bearer \" + getToken() },\n  // 上传的地址\n  url: process.env.VUE_APP_BASE_API + \"/common/upload\",\n  // 上传的文件列表\n  fileList: []\n},\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n4、新增和修改操作对应处理fileList参数\n\nhandleAdd() {\n  ...\n  this.upload.fileList = [];\n}\n\nhandleUpdate(row) {\n  ...\n  this.upload.fileList = [{ name: this.form.fileName, url: this.form.filePath }];\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n5、添加对应事件\n\n// 文件提交处理\nsubmitUpload() {\n  this.$refs.upload.submit();\n},\n// 文件上传中处理\nhandleFileUploadProgress(event, file, fileList) {\n  this.upload.isUploading = true;\n},\n// 文件上传成功处理\nhandleFileSuccess(response, file, fileList) {\n  this.upload.isUploading = false;\n  this.form.filePath = response.url;\n  this.msgSuccess(response.msg);\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n#\n下载实现流程\n\n1、添加对应按钮和事件\n\n<el-button\n  size=\"mini\"\n  type=\"text\"\n  icon=\"el-icon-edit\"\n  @click=\"handleDownload(scope.row)\"\n>下载</el-button>\n\n1\n2\n3\n4\n5\n6\n\n\n2、实现文件下载\n\n// 文件下载处理\nhandleDownload(row) {\n  var name = row.fileName;\n  var url = row.filePath;\n  var suffix = url.substring(url.lastIndexOf(\".\"), url.length);\n  const a = document.createElement('a')\n  a.setAttribute('download', name + suffix)\n  a.setAttribute('target', '_blank')\n  a.setAttribute('href', url)\n  a.click()\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n#\n权限注解\n\nSpring Security提供了Spring EL表达式，允许我们在定义接口访问的方法上面添加注解，来控制访问权限。\n\n#\n权限方法\n\n@PreAuthorize注解用于配置接口要求用户拥有某些权限才可访问，它拥有如下方法\n\n方法\t参数\t描述\nhasPermi\tString\t验证用户是否具备某权限\nlacksPermi\tString\t验证用户是否不具备某权限，与 hasPermi逻辑相反\nhasAnyPermi\tString\t验证用户是否具有以下任意一个权限\nhasRole\tString\t判断用户是否拥有某个角色\nlacksRole\tString\t验证用户是否不具备某角色，与 isRole逻辑相反\nhasAnyRoles\tString\t验证用户是否具有以下任意一个角色，多个逗号分隔\n#\n使用示例\n\n其中@ss代表的是PermissionService \n(opens new window)\n服务，对每个接口拦截并调用PermissionService的对应方法判断接口调用者的权限。\n\n数据权限示例。\n// 符合system:user:list权限要求\n@PreAuthorize(\"@ss.hasPermi('system:user:list')\")\n\n// 不符合system:user:list权限要求\n@PreAuthorize(\"@ss.lacksPermi('system:user:list')\")\n\n// 符合system:user:add或system:user:edit权限要求即可\n@PreAuthorize(\"@ss.hasAnyPermi('system:user:add,system:user:edit')\")\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n编程式判断是否有资源权限\n\nif (SecurityUtils.hasPermi(\"sys:user:edit\"))\n{\n    System.out.println(\"当前用户有编辑用户权限\");\n}\n\n1\n2\n3\n4\n\n角色权限示例。\n// 属于user角色\n@PreAuthorize(\"@ss.hasRole('user')\")\n\n// 不属于user角色\n@PreAuthorize(\"@ss.lacksRole('user')\")\n\n// 属于user或者admin之一\n@PreAuthorize(\"@ss.hasAnyRoles('user,admin')\")\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n编程式判断是否有角色权限\n\nif (SecurityUtils.hasRole(\"admin\"))\n{\n    System.out.println(\"当前用户有admin角色权限\");\n}\n\n1\n2\n3\n4\n\n\n权限提示\n\n超级管理员拥有所有权限，不受权限约束。\n\n#\n公开接口\n\n如果有些接口是不需要验证权限可以公开访问的，这个时候就需要我们给接口放行。\n\n使用注解方式，只需要在Controller的类或方法上加入@Anonymous该注解即可\n\n// @PreAuthorize(\"@ss.xxxx('....')\") 注释或删除掉原有的权限注解\n@Anonymous\n@GetMapping(\"/list\")\npublic List<SysXxxx> list(SysXxxx xxxx)\n{\n    return xxxxList;\n}\n\n1\n2\n3\n4\n5\n6\n7\n\n#\n事务管理\n\n参考事务管理实现\n\n#\n异常处理\n\n参考异常处理实现\n\n#\n参数验证\n\n参考参数验证\n\n#\n系统日志\n\n参考系统日志实现\n\n#\n数据权限\n\n参考数据权限实现\n\n#\n多数据源\n\n参考多数据源实现\n\n#\n代码生成\n\n参考代码生成实现\n\n#\n定时任务\n\n参考定时任务实现\n\n#\n系统接口\n\n参考系统接口实现\n\n#\n防重复提交\n\n防重复提交实现\n\n#\n国际化支持\n#\n后台国际化流程\n\n后台国际化流程\n\n#\n前端国际化流程\n\n1、package.json中dependencies节点添加vue-i18n\n\n\"vue-i18n\": \"7.3.2\",\n\n1\n\n\n2、src目录下创建lang目录，存放国际化文件\n此处包含三个文件，分别是 index.js zh.js en.js\n\n// index.js\nimport Vue from 'vue'\nimport VueI18n from 'vue-i18n'\nimport Cookies from 'js-cookie'\nimport elementEnLocale from 'element-ui/lib/locale/lang/en' // element-ui lang\nimport elementZhLocale from 'element-ui/lib/locale/lang/zh-CN'// element-ui lang\nimport enLocale from './en'\nimport zhLocale from './zh'\n\nVue.use(VueI18n)\n\nconst messages = {\n  en: {\n    ...enLocale,\n    ...elementEnLocale\n  },\n  zh: {\n    ...zhLocale,\n    ...elementZhLocale\n  }\n}\n\nconst i18n = new VueI18n({\n  // 设置语言 选项 en | zh\n  locale: Cookies.get('language') || 'en',\n  // 设置文本内容\n  messages\n})\n\nexport default i18n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n// zh.js\nexport default {\n  login: {\n    title: '若依后台管理系统',\n    logIn: '登录',\n    username: '账号',\n    password: '密码'\n  },\n  tagsView: {\n    refresh: '刷新',\n    close: '关闭',\n    closeOthers: '关闭其它',\n    closeAll: '关闭所有'\n  },\n  settings: {\n    title: '系统布局配置',\n    theme: '主题色',\n    tagsView: '开启 Tags-View',\n    fixedHeader: '固定 Header',\n    sidebarLogo: '侧边栏 Logo'\n  }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n// en.js\nexport default {\n  login: {\n    title: 'RuoYi Login Form',\n    logIn: 'Log in',\n    username: 'Username',\n    password: 'Password'\n  },\n  tagsView: {\n    refresh: 'Refresh',\n    close: 'Close',\n    closeOthers: 'Close Others',\n    closeAll: 'Close All'\n  },\n  settings: {\n    title: 'Page style setting',\n    theme: 'Theme Color',\n    tagsView: 'Open Tags-View',\n    fixedHeader: 'Fixed Header',\n    sidebarLogo: 'Sidebar Logo'\n  }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n3、在src/main.js中增量添加i18n\n\nimport i18n from './lang'\n\n// use添加i18n\nVue.use(Element, {\n  i18n: (key, value) => i18n.t(key, value)\n})\n\nnew Vue({\n  i18n,\n})\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n4、在src/store/getters.js中添加language\n\nlanguage: state => state.app.language,\n\n1\n\n\n5、在src/store/modules/app.js中增量添加i18n\n\nconst state = {\n  language: Cookies.get('language') || 'en'\n}\n\nconst mutations = {\n  SET_LANGUAGE: (state, language) => {\n    state.language = language\n    Cookies.set('language', language)\n  }\n}\n\nconst actions = {\n  setLanguage({ commit }, language) {\n    commit('SET_LANGUAGE', language)\n  }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n6、在src/components/LangSelect/index.vue中创建汉化组件\n\n<template>\n  <el-dropdown trigger=\"click\" class=\"international\" @command=\"handleSetLanguage\">\n    <div>\n      <svg-icon class-name=\"international-icon\" icon-class=\"language\" />\n    </div>\n    <el-dropdown-menu slot=\"dropdown\">\n      <el-dropdown-item :disabled=\"language==='zh'\" command=\"zh\">\n        中文\n      </el-dropdown-item>\n      <el-dropdown-item :disabled=\"language==='en'\" command=\"en\">\n        English\n      </el-dropdown-item>\n    </el-dropdown-menu>\n  </el-dropdown>\n</template>\n\n<script>\nexport default {\n  computed: {\n    language() {\n      return this.$store.getters.language\n    }\n  },\n  methods: {\n    handleSetLanguage(lang) {\n      this.$i18n.locale = lang\n      this.$store.dispatch('app/setLanguage', lang)\n      this.$message({\n        message: '设置语言成功',\n        type: 'success'\n      })\n    }\n  }\n}\n</script>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n7、登录页面汉化\n\n<template>\n  <div class=\"login\">\n    <el-form ref=\"loginForm\" :model=\"loginForm\" :rules=\"loginRules\" class=\"login-form\">\n      <h3 class=\"title\">{{ $t('login.title') }}</h3>\n      <lang-select class=\"set-language\" />\n      <el-form-item prop=\"username\">\n        <el-input v-model=\"loginForm.username\" type=\"text\" auto-complete=\"off\" :placeholder=\"$t('login.username')\">\n          <svg-icon slot=\"prefix\" icon-class=\"user\" class=\"el-input__icon input-icon\" />\n        </el-input>\n      </el-form-item>\n      <el-form-item prop=\"password\">\n        <el-input\n          v-model=\"loginForm.password\"\n          type=\"password\"\n          auto-complete=\"off\"\n          :placeholder=\"$t('login.password')\"\n          @keyup.enter.native=\"handleLogin\"\n        >\n          <svg-icon slot=\"prefix\" icon-class=\"password\" class=\"el-input__icon input-icon\" />\n        </el-input>\n      </el-form-item>\n      <el-form-item prop=\"code\">\n        <el-input\n          v-model=\"loginForm.code\"\n          auto-complete=\"off\"\n          placeholder=\"验证码\"\n          style=\"width: 63%\"\n          @keyup.enter.native=\"handleLogin\"\n        >\n          <svg-icon slot=\"prefix\" icon-class=\"validCode\" class=\"el-input__icon input-icon\" />\n        </el-input>\n        <div class=\"login-code\">\n          <img :src=\"codeUrl\" @click=\"getCode\" />\n        </div>\n      </el-form-item>\n      <el-checkbox v-model=\"loginForm.rememberMe\" style=\"margin:0px 0px 25px 0px;\">记住密码</el-checkbox>\n      <el-form-item style=\"width:100%;\">\n        <el-button\n          :loading=\"loading\"\n          size=\"medium\"\n          type=\"primary\"\n          style=\"width:100%;\"\n          @click.native.prevent=\"handleLogin\"\n        >\n          <span v-if=\"!loading\">{{ $t('login.logIn') }}</span>\n          <span v-else>登 录 中...</span>\n        </el-button>\n      </el-form-item>\n    </el-form>\n    <!--  底部  -->\n    <div class=\"el-login-footer\">\n      <span>Copyright © 2018-2019 ruoyi.vip All Rights Reserved.</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport LangSelect from '@/components/LangSelect'\nimport { getCodeImg } from \"@/api/login\";\nimport Cookies from \"js-cookie\";\nimport { encrypt, decrypt } from '@/utils/jsencrypt'\n\nexport default {\n  name: \"Login\",\n  components: { LangSelect },\n  data() {\n    return {\n      codeUrl: \"\",\n      cookiePassword: \"\",\n      loginForm: {\n        username: \"admin\",\n        password: \"admin123\",\n        rememberMe: false,\n        code: \"\",\n        uuid: \"\"\n      },\n      loginRules: {\n        username: [\n          { required: true, trigger: \"blur\", message: \"用户名不能为空\" }\n        ],\n        password: [\n          { required: true, trigger: \"blur\", message: \"密码不能为空\" }\n        ],\n        code: [{ required: true, trigger: \"change\", message: \"验证码不能为空\" }]\n      },\n      loading: false,\n      redirect: undefined\n    };\n  },\n  watch: {\n    $route: {\n      handler: function(route) {\n        this.redirect = route.query && route.query.redirect;\n      },\n      immediate: true\n    }\n  },\n  created() {\n    this.getCode();\n    this.getCookie();\n  },\n  methods: {\n    getCode() {\n      getCodeImg().then(res => {\n        this.codeUrl = \"data:image/gif;base64,\" + res.img;\n        this.loginForm.uuid = res.uuid;\n      });\n    },\n    getCookie() {\n      const username = Cookies.get(\"username\");\n      const password = Cookies.get(\"password\");\n      const rememberMe = Cookies.get('rememberMe')\n      this.loginForm = {\n        username: username === undefined ? this.loginForm.username : username,\n        password: password === undefined ? this.loginForm.password : decrypt(password),\n        rememberMe: rememberMe === undefined ? false : Boolean(rememberMe)\n      };\n    },\n    handleLogin() {\n      this.$refs.loginForm.validate(valid => {\n        if (valid) {\n          this.loading = true;\n          if (this.loginForm.rememberMe) {\n            Cookies.set(\"username\", this.loginForm.username, { expires: 30 });\n            Cookies.set(\"password\", encrypt(this.loginForm.password), { expires: 30 });\n            Cookies.set('rememberMe', this.loginForm.rememberMe, { expires: 30 });\n          } else {\n            Cookies.remove(\"username\");\n            Cookies.remove(\"password\");\n            Cookies.remove('rememberMe');\n          }\n          this.$store\n            .dispatch(\"Login\", this.loginForm)\n            .then(() => {\n              this.loading = false;\n              this.$router.push({ path: this.redirect || \"/\" });\n            })\n            .catch(() => {\n              this.loading = false;\n              this.getCode();\n            });\n        }\n      });\n    }\n  }\n};\n</script>\n\n<style rel=\"stylesheet/scss\" lang=\"scss\">\n.login {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  background-image: url(\"../assets/image/login-background.jpg\");\n  background-size: cover;\n}\n.title {\n  margin: 0px auto 30px auto;\n  text-align: center;\n  color: #707070;\n}\n\n.login-form {\n  border-radius: 6px;\n  background: #ffffff;\n  width: 400px;\n  padding: 25px 25px 5px 25px;\n  .el-input {\n    height: 38px;\n    input {\n      height: 38px;\n    }\n  }\n  .input-icon {\n    height: 39px;\n    width: 14px;\n    margin-left: 2px;\n  }\n}\n.login-tip {\n  font-size: 13px;\n  text-align: center;\n  color: #bfbfbf;\n}\n.login-code {\n  width: 33%;\n  height: 38px;\n  float: right;\n  img {\n    cursor: pointer;\n    vertical-align: middle;\n  }\n}\n.el-login-footer {\n  height: 40px;\n  line-height: 40px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  text-align: center;\n  color: #fff;\n  font-family: Arial;\n  font-size: 12px;\n  letter-spacing: 1px;\n}\n</style>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n\n普通文本使用方式： {{ $t('login.title') }}\n标签内使用方式：   :placeholder=\"$t('login.password')\"\njs内使用方式       this.$t('login.user.password.not.match')\n\n1\n2\n3\n\n#\n新建子模块\n\n参考新建子模块\n\n← 项目介绍\n前端手册 →"
  },
  {
    "html": "RuoYi\n文档分离版微服务版移动端版💖赞助💖\n生态系统 \nGitHub \n(opens new window)\nGitee \n(opens new window)\n\n\n\n文档\n\n介绍\n快速了解\n环境部署\n项目介绍\n文件结构\n后端结构\n前端结构\n配置文件\n核心技术\n后端技术\n前端技术\n后台手册\n前端手册\n组件文档\n插件集成\n项目扩展\n视频教程\n更新日志\n\n其它\n\n常见问题\n捐赠支持\n#\n项目介绍\n#\n文件结构\n#\n后端结构\ncom.ruoyi     \n├── common            // 工具类\n│       └── annotation                    // 自定义注解\n│       └── config                        // 全局配置\n│       └── constant                      // 通用常量\n│       └── core                          // 核心控制\n│       └── enums                         // 通用枚举\n│       └── exception                     // 通用异常\n│       └── filter                        // 过滤器处理\n│       └── utils                         // 通用类处理\n├── framework         // 框架核心\n│       └── aspectj                       // 注解实现\n│       └── config                        // 系统配置\n│       └── datasource                    // 数据权限\n│       └── interceptor                   // 拦截器\n│       └── manager                       // 异步处理\n│       └── security                      // 权限控制\n│       └── web                           // 前端控制\n├── ruoyi-generator   // 代码生成（可移除）\n├── ruoyi-quartz      // 定时任务（可移除）\n├── ruoyi-system      // 系统代码\n├── ruoyi-admin       // 后台服务\n├── ruoyi-xxxxxx      // 其他模块\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n#\n前端结构\n├── build                      // 构建相关  \n├── bin                        // 执行脚本\n├── public                     // 公共文件\n│   ├── favicon.ico            // favicon图标\n│   └── index.html             // html模板\n│   └── robots.txt             // 反爬虫\n├── src                        // 源代码\n│   ├── api                    // 所有请求\n│   ├── assets                 // 主题 字体等静态资源\n│   ├── components             // 全局公用组件\n│   ├── directive              // 全局指令\n│   ├── layout                 // 布局\n│   ├── plugins                // 通用方法\n│   ├── router                 // 路由\n│   ├── store                  // 全局 store管理\n│   ├── utils                  // 全局公用方法\n│   ├── views                  // view\n│   ├── App.vue                // 入口页面\n│   ├── main.js                // 入口 加载组件 初始化等\n│   ├── permission.js          // 权限管理\n│   └── settings.js            // 系统配置\n├── .editorconfig              // 编码格式\n├── .env.development           // 开发环境配置\n├── .env.production            // 生产环境配置\n├── .env.staging               // 测试环境配置\n├── .eslintignore              // 忽略语法检查\n├── .eslintrc.js               // eslint 配置项\n├── .gitignore                 // git 忽略项\n├── babel.config.js            // babel.config.js\n├── package.json               // package.json\n└── vue.config.js              // vue.config.js\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n#\n配置文件\n\n通用配置 application.yml\n\n# 项目相关配置\nruoyi:\n  # 名称\n  name: RuoYi\n  # 版本\n  version: 3.3.0\n  # 版权年份\n  copyrightYear: 2021\n  # 实例演示开关\n  demoEnabled: true\n  # 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /home/ruoyi/uploadPath）\n  profile: D:/ruoyi/uploadPath\n  # 获取ip地址开关\n  addressEnabled: false\n  # 验证码类型 math 数组计算 char 字符验证\n  captchaType: math\n\n# 开发环境配置\nserver:\n  # 服务器的HTTP端口，默认为8080\n  port: 8080\n  servlet:\n    # 应用的访问路径\n    context-path: /\n  tomcat:\n    # tomcat的URI编码\n    uri-encoding: UTF-8\n    # tomcat最大线程数，默认为200\n    max-threads: 800\n    # Tomcat启动初始化的线程数，默认值25\n    min-spare-threads: 30\n\n# 日志配置\nlogging:\n  level:\n    com.ruoyi: debug\n    org.springframework: warn\n\n# Spring配置\nspring:\n  # 资源信息\n  messages:\n    # 国际化资源文件路径\n    basename: i18n/messages\n  profiles: \n    active: druid\n  # 文件上传\n  servlet:\n     multipart:\n       # 单个文件大小\n       max-file-size:  10MB\n       # 设置总上传的文件大小\n       max-request-size:  20MB\n  # 服务模块\n  devtools:\n    restart:\n      # 热部署开关\n      enabled: true\n  # redis 配置\n  redis:\n    # 地址\n    host: localhost\n    # 端口，默认为6379\n    port: 6379\n    # 数据库索引\n    database: 0\n    # 密码\n    password: \n    # 连接超时时间\n    timeout: 10s\n    lettuce:\n      pool:\n        # 连接池中的最小空闲连接\n        min-idle: 0\n        # 连接池中的最大空闲连接\n        max-idle: 8\n        # 连接池的最大数据库连接数\n        max-active: 8\n        # #连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-wait: -1ms\n\n# token配置\ntoken:\n    # 令牌自定义标识\n    header: Authorization\n    # 令牌密钥\n    secret: abcdefghijklmnopqrstuvwxyz\n    # 令牌有效期（默认30分钟）\n    expireTime: 30\n  \n# MyBatis配置\nmybatis:\n    # 搜索指定包别名\n    typeAliasesPackage: com.ruoyi.**.domain\n    # 配置mapper的扫描，找到所有的mapper.xml映射文件\n    mapperLocations: classpath*:mapper/**/*Mapper.xml\n    # 加载全局的配置文件\n    configLocation: classpath:mybatis/mybatis-config.xml\n\n# PageHelper分页插件\npagehelper: \n  helperDialect: mysql\n  reasonable: true\n  supportMethodsArguments: true\n  params: count=countSql \n\n# Swagger配置\nswagger:\n  # 是否开启swagger\n  enabled: true\n  # 请求前缀\n  pathMapping: /dev-api\n\n# 防止XSS攻击\nxss: \n  # 过滤开关\n  enabled: true\n  # 排除链接（多个用逗号分隔）\n  excludes: /system/notice/*\n  # 匹配链接\n  urlPatterns: /system/*,/monitor/*,/tool/*\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n\n\n数据源配置 application-druid.yml\n\n# 数据源配置\nspring:\n    datasource:\n        type: com.alibaba.druid.pool.DruidDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        druid:\n            # 主库数据源\n            master:\n                url: jdbc:mysql://localhost:3306/ry-vue?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n                username: root\n                password: password\n            # 从库数据源\n            slave:\n                # 从数据源开关/默认关闭\n                enabled: false\n                url: \n                username: \n                password: \n            # 初始连接数\n            initialSize: 5\n            # 最小连接池数量\n            minIdle: 10\n            # 最大连接池数量\n            maxActive: 20\n            # 配置获取连接等待超时的时间\n            maxWait: 60000\n            # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\n            timeBetweenEvictionRunsMillis: 60000\n            # 配置一个连接在池中最小生存的时间，单位是毫秒\n            minEvictableIdleTimeMillis: 300000\n            # 配置一个连接在池中最大生存的时间，单位是毫秒\n            maxEvictableIdleTimeMillis: 900000\n            # 配置检测连接是否有效\n            validationQuery: SELECT 1 FROM DUAL\n            testWhileIdle: true\n            testOnBorrow: false\n            testOnReturn: false\n            webStatFilter: \n                enabled: true\n            statViewServlet:\n                enabled: true\n                # 设置白名单，不填则允许所有访问\n                allow:\n                url-pattern: /druid/*\n                # 控制台管理用户名和密码\n                login-username: \n                login-password: \n            filter:\n                stat:\n                    enabled: true\n                    # 慢SQL记录\n                    log-slow-sql: true\n                    slow-sql-millis: 1000\n                    merge-sql: true\n                wall:\n                    config:\n                        multi-statement-allow: true\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n代码生成配置 generator.yml\n\n# 代码生成\ngen: \n  # 作者\n  author: ruoyi\n  # 默认生成包路径 system 需改成自己的模块名称 如 system monitor tool\n  packageName: com.ruoyi.system\n  # 自动去除表前缀，默认是false\n  autoRemovePre: false\n  # 表前缀（生成类名不会包含表前缀，多个用逗号分隔）\n  tablePrefix: sys_\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n#\n核心技术\n\nTIP\n\n前端技术栈 ES6、vue、vuex、vue-router、vue-cli、axios、element-ui\n后端技术栈 SpringBoot、MyBatis、Spring Security、Jwt\n#\n后端技术\n#\nSpringBoot框架\n\n1、介绍\nSpring Boot是一款开箱即用框架，提供各种默认配置来简化项目配置。让我们的Spring应用变的更轻量化、更快的入门。 在主程序执行main函数就可以运行。你也可以打包你的应用为jar并通过使用java -jar来运行你的Web应用。它遵循\"约定优先于配置\"的原则， 使用SpringBoot只需很少的配置，大部分的时候直接使用默认的配置即可。同时可以与Spring Cloud的微服务无缝结合。\n\n提示\n\nSpring Boot2.x版本环境要求必须是jdk8或以上版本，服务器Tomcat8或以上版本\n\n2、优点\n\n使编码变得简单： 推荐使用注解。\n使配置变得简单： 自动配置、快速集成新技术能力 没有冗余代码生成和XML配置的要求\n使部署变得简单： 内嵌Tomcat、Jetty、Undertow等web容器，无需以war包形式部署\n使监控变得简单： 提供运行时的应用监控\n使集成变得简单： 对主流开发框架的无配置集成。\n使开发变得简单： 极大地提高了开发快速构建项目、部署效率。\n#\nSpring Security安全控制\n\n1、介绍\nSpring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。\n\n2、功能\nAuthentication 认证，就是用户登录\nAuthorization 授权，判断用户拥有什么权限，可以访问什么资源\n安全防护，跨站脚本攻击，session攻击等\n非常容易结合Spring进行使用\n\n3、Spring Security与Shiro的区别\n\n相同点\n\n1、认证功能\n2、授权功能\n3、加密功能\n4、会话管理\n5、缓存支持\n6、rememberMe功能\n....\n\n不同点\n\n优点：\n\n1、Spring Security基于Spring开发，项目如果使用Spring作为基础，配合Spring Security做权限更加方便。而Shiro需要和Spring进行整合开发\n2、Spring Security功能比Shiro更加丰富，例如安全防护方面\n3、Spring Security社区资源相对比Shiro更加丰富\n\n缺点：\n\n1）Shiro的配置和使用比较简单，Spring Security上手复杂些\n2）Shiro依赖性低，不需要依赖任何框架和容器，可以独立运行。Spring Security依赖Spring容器\n\n#\n前端技术\nnpm：node.js的包管理工具，用于统一管理我们前端项目中需要用到的包、插件、工具、命令等，便于开发和维护。\nES6：Javascript的新版本，ECMAScript6的简称。利用ES6我们可以简化我们的JS代码，同时利用其提供的强大功能来快速实现JS逻辑。\nvue-cli：Vue的脚手架工具，用于自动生成Vue项目的目录及文件。\nvue-router： Vue提供的前端路由工具，利用其我们实现页面的路由控制，局部刷新及按需加载，构建单页应用，实现前后端分离。\nvuex：Vue提供的状态管理工具，用于统一管理我们项目中各种数据的交互和重用，存储我们需要用到数据对象。\nelement-ui：基于MVVM框架Vue开源出来的一套前端ui组件。\n\n← 环境部署\n后台手册 →"
  },
  {
    "html": "RuoYi\n文档分离版微服务版移动端版💖赞助💖\n生态系统 \nGitHub \n(opens new window)\nGitee \n(opens new window)\n\n\n\n文档\n\n介绍\n快速了解\n环境部署\n准备工作\n运行系统\n后端运行\n前端运行\n必要配置\n部署系统\n后端部署\n前端部署\n环境变量\nTomcat配置\nNginx配置\n常见问题\n项目介绍\n后台手册\n前端手册\n组件文档\n插件集成\n项目扩展\n视频教程\n更新日志\n\n其它\n\n常见问题\n捐赠支持\n#\n环境部署\n#\n准备工作\nJDK >= 1.8 (推荐1.8版本)\nMysql >= 5.7.0 (推荐5.7版本)\nRedis >= 3.0\nMaven >= 3.0\nNode >= 12\n\n1\n2\n3\n4\n5\n\n\n提示\n\n前端安装完node后，最好设置下淘宝的镜像源，不建议使用cnpm（可能会出现奇怪的问题）\n\n#\n运行系统\n\n前往Gitee下载页面(https://gitee.com/y_project/RuoYi-Vue \n(opens new window)\n)下载解压到工作目录\n\n#\n后端运行\n\n1、导入到Eclipse，菜单 File -> Import，然后选择 Maven -> Existing Maven Projects，点击 Next> 按钮，选择工作目录，然后点击 Finish 按钮，即可成功导入。\nEclipse会自动加载Maven依赖包，初次加载会比较慢（根据自身网络情况而定）\n2、创建数据库ry-vue并导入数据脚本ry_2021xxxx.sql，quartz.sql\n3、打开项目运行com.ruoyi.RuoYiApplication.java，出现如下图表示启动成功。\n\n(♥◠‿◠)ﾉﾞ  若依启动成功   ლ(´ڡ`ლ)ﾞ  \n .-------.       ____     __        \n |  _ _   \\      \\   \\   /  /    \n | ( ' )  |       \\  _. /  '       \n |(_ o _) /        _( )_ .'         \n | (_,_).' __  ___(_ o _)'          \n |  |\\ \\  |  ||   |(_,_)'         \n |  | \\ `'   /|   `-'  /           \n |  |  \\    /  \\      /           \n ''-'   `'-'    `-..-'    \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n提示\n\n后端运行成功可以通过(http://localhost:8080 \n(opens new window)\n)访问，但是不会出现静态页面，可以继续参考下面步骤部署ruoyi-ui前端，然后通过前端地址来访问。\n\n#\n前端运行\n# 进入项目目录\ncd ruoyi-ui\n\n# 安装依赖\nnpm install\n\n# 强烈建议不要用直接使用 cnpm 安装，会有各种诡异的 bug，可以通过重新指定 registry 来解决 npm 安装速度慢的问题。\nnpm install --registry=https://registry.npmmirror.com\n\n# 本地开发 启动项目\nnpm run dev\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n4、打开浏览器，输入：(http://localhost:80 \n(opens new window)\n) 默认账户/密码 admin/admin123）\n若能正确展示登录页面，并能成功登录，菜单及页面展示正常，则表明环境搭建成功\n\n建议使用Git克隆，因为克隆的方式可以和RuoYi随时保持更新同步。使用Git命令克隆\n\ngit clone https://gitee.com/y_project/RuoYi-Vue.git\n\n1\n\n\n提示\n\n因为本项目是前后端完全分离的，所以需要前后端都单独启动好，才能进行访问。\n前端安装完node后，最好设置下淘宝的镜像源，不建议使用cnpm（可能会出现奇怪的问题）\n\n#\n必要配置\n修改数据库连接，编辑resources目录下的application-druid.yml\n\n\n\n\n\n\n\n\n\n \n \n \n\n\n# 数据源配置\nspring:\n    datasource:\n        type: com.alibaba.druid.pool.DruidDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        druid:\n            # 主库数据源\n            master:\n                url: 数据库地址\n                username: 数据库账号\n                password: 数据库密码\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n修改服务器配置，编辑resources目录下的application.yml\n\n\n\n\n \n \n \n \n\n\n# 开发环境配置\nserver:\n  # 服务器的HTTP端口，默认为80\n  port: 端口\n  servlet:\n    # 应用的访问路径\n    context-path: /应用路径\n\n1\n2\n3\n4\n5\n6\n7\n\n#\n部署系统\n\n提示\n\n因为本项目是前后端完全分离的，所以需要前后端都单独部署好，才能进行访问。\n\n#\n后端部署\n打包工程文件\n\n在ruoyi项目的bin目录下执行package.bat打包Web工程，生成war/jar包文件。\n然后会在项目下生成target文件夹包含war或jar\n\n提示\n\n多模块版本会生成在ruoyi/ruoyi-admin模块下target文件夹\n\n部署工程文件\n\n1、jar部署方式\n使用命令行执行：java –jar ruoyi.jar 或者执行脚本：ruoyi/bin/run.bat\n\n2、war部署方式\nruoyi/pom.xml中的packaging修改为war，放入tomcat服务器webapps\n\n   <packaging>war</packaging>\n\n1\n\n\n提示\n\n多模块版本在ruoyi/ruoyi-admin模块下修改pom.xml\n\nSpringBoot去除内嵌Tomcat（PS：此步骤不重要，因为不排除也能在容器中部署war）\n<!-- 多模块排除内置tomcat -->\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-web</artifactId>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-tomcat</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n\t\t\n<!-- 单应用排除内置tomcat -->\t\t\n<exclusions>\n\t<exclusion>\n\t\t<artifactId>spring-boot-starter-tomcat</artifactId>\n\t\t<groupId>org.springframework.boot</groupId>\n\t</exclusion>\n</exclusions>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n#\n前端部署\n\n当项目开发完毕，只需要运行一行命令就可以打包你的应用\n\n# 打包正式环境\nnpm run build:prod\n\n# 打包预发布环境\nnpm run build:stage\n\n1\n2\n3\n4\n5\n\n\n构建打包成功之后，会在根目录生成 dist 文件夹，里面就是构建打包好的文件，通常是 ***.js 、***.css、index.html 等静态文件。\n\n通常情况下 dist 文件夹的静态文件发布到你的 nginx 或者静态服务器即可，其中的 index.html 是后台服务的入口页面。\n\noutputDir 提示\n\n如果需要自定义构建，比如指定 dist 目录等，则需要通过 config \n(opens new window)\n的 outputDir 进行配置。\n\npublicPath 提示\n\n部署时改变页面js 和 css 静态引入路径 ,只需修改 vue.config.js 文件资源路径即可。\n\npublicPath: './' //请根据自己路径来配置更改\n\n1\n\nexport default new Router({\n  mode: 'hash', // hash模式\n})\n\n1\n2\n3\n\n#\n环境变量\n\n所有测试环境或者正式环境变量的配置都在 .env.development \n(opens new window)\n等 .env.xxxx文件中。\n\n它们都会通过 webpack.DefinePlugin 插件注入到全局。\n\n环境变量必须以VUE_APP_为开头。如:VUE_APP_API、VUE_APP_TITLE\n\n你在代码中可以通过如下方式获取:\n\nconsole.log(process.env.VUE_APP_xxxx)\n\n1\n\n\n扩展阅读：《Vue CLI - 环境变量和模式》\n(opens new window)\n\n注意\n\n环境配置修改后，需要重新运行才会生效\n\n\n\n#\nTomcat配置\n\n修改server.xml，Host节点下添加\n\n<Context docBase=\"\" path=\"/\" reloadable=\"true\" source=\"\"/>\n\n1\n\n\ndist目录的文件夹下新建WEB-INF文件夹，并在里面添加web.xml文件\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" \n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n        http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n        version=\"3.1\" metadata-complete=\"true\">\n     <display-name>Router for Tomcat</display-name>\n     <error-page>\n        <error-code>404</error-code>\n        <location>/index.html</location>\n    </error-page>\n</web-app>\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n#\nNginx配置\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\t\tcharset utf-8;\n\n\t\tlocation / {\n            root   /home/ruoyi/projects/ruoyi-ui;\n\t\t\ttry_files $uri $uri/ /index.html;\n            index  index.html index.htm;\n        }\n\t\t\n\t\tlocation /prod-api/ {\n\t\t\tproxy_set_header Host $http_host;\n\t\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\t\tproxy_set_header REMOTE-HOST $remote_addr;\n\t\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\t\tproxy_pass http://localhost:8080/;\n\t\t}\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n建议开启Gzip压缩\n\n\n#\n常见问题\n如果使用Mac需要修改application.yml文件路径profile\n如果使用Linux 提示表不存在，设置大小写敏感配置在/etc/my.cnf添加lower_case_table_names=1，重启MYSQL服务\n如果提示当前权限不足，无法写入文件请检查application.yml中的profile路径或logback.xml中的log.path路径是否有可读可写操作权限\n\n如遇到无法解决的问题请到Issues \n(opens new window)\n反馈，会不定时进行解答。\n\n← 快速了解\n项目介绍 →"
  },
  {
    "html": "RuoYi\n文档分离版微服务版移动端版💖赞助💖\n生态系统 \nGitHub \n(opens new window)\nGitee \n(opens new window)\n\n\n\n文档\n\n介绍\n快速了解\n环境部署\n项目介绍\n后台手册\n前端手册\n组件文档\n插件集成\n项目扩展\n后台扩展\n视频教程\n更新日志\n\n其它\n\n常见问题\n捐赠支持\n#\n项目扩展\n#\n后台扩展\n\n项目扩展用于收集来自基于RuoYi-Vue \n(opens new window)\n的插件集成或完整项目，由开发者自己维护。如果你有自己或喜欢的项目想出现在列表中，可以发送仓库地址到我的邮箱346039442@qq.com..\n\n名称\t说明\t地址\nRuoYi-Vue3\tRuoYi-Vue的前端（Vue3 Element Plus Vite）版本\thttps://github.com/yangzongzhuan/RuoYi-Vue3\nRuoYi-App\tRuoYi-Vue的移动端版本\thttps://gitee.com/y_project/RuoYi-App\nRuoYi-Vue-fast\tRuoYi-Vue单应用版本\thttps://github.com/yangzongzhuan/RuoYi-Vue-fast\nRuoYi-Vue-Oracle\tRuoYi-Vue的Oracle版本\thttps://github.com/yangzongzhuan/RuoYi-Vue-Oracle\nRuoYi-Vue-Activiti\t集成Activiti 6.x工作流版本\thttps://gitee.com/smell2/ruoyi-vue-activiti\nRuoYi-Vue-Process\t闲鹿工作流版本\thttps://gitee.com/calvinhwang123/RuoYi-Vue-Process\nRuoYi-Vue-Flowable\t集成Flowable 6.x工作流版本\thttps://gitee.com/tony2y/RuoYi-flowable\nRuoYi-Vue-Antdv\tRuoYi-Vue的纯前端Antdv版本\thttps://gitee.com/fuzui/RuoYi-Antdv\nRuoYi-AiDex-Sharp\tRuoYi-Vue的纯前端Antdv版本，重点进行了UI升级美化等\thttps://gitee.com/big-hedgehog/aidex-sharp\nRuoYi-Vue-AutoEE\tRuoYi-Vue的Vite、ant-design-vue3版本\thttps://gitee.com/Double_AutoEE/AutoEE\nRuoYi-Vue-Sqlserver\tRuoYi-Vue的Sqlserver版本，集成CAS、P6spy等\thttps://gitee.com/MaShangYouLi/RuoYi-Vue-SQLServer-C\nRuoYi-Vue-Sqlserver\tRuoYi-Vue的Sqlserver版本\thttps://gitee.com/wpp011/RuoYi-Vue-SQLServer\nRuoYi-Vue-Sqlserver\tRuoYi-Vue的Sqlserver版本\thttps://gitee.com/Sxile/RuoYi-Vue-Sqlserver\nRuoYi-Vue-React\tRuoYi-Vue的React版本\thttps://gitee.com/whiteshader/ruoyi-react\nRuoYi-Vue-NET\tRuoYi-Vue的.NET5版本\thttps://gitee.com/izory/ZrAdminNetCore\nRuoYi-Vue3-NET\tRuoYi-Vue3的.NET6版本\thttps://gitee.com/ccnetcore/yi\nRuoYi-Vue-Rust\tRuoYi-Vue的Rust版本\thttps://github.com/mengyou658/actix_admin\nRuoYi-Vue-Rust\tRuoYi-Vue的Rust版本\thttps://gitee.com/wizount/ruoyi-rust\nRuoYi-Vue-geek\t集成SpringBoot3、mybatis-plus二次修改的版本\thttps://gitee.com/geek-xd/ruoyi-spring-boot3-geek\nRuoYi-Vue-Plus\t集成Mybatis-Plus、Hutool、OSS存储、分布式锁等组件\thttps://gitee.com/dromara/RuoYi-Vue-Plus\nRuoYi-Vue-Plus\tRuoYi-Vue的腾讯开源框架TDesign UI框架\thttps://gitee.com/zhangmrit/RuoYi-Vue-Plus\nRuoYi-Vue-TDesign\tRuoYi-Vue-Plus的腾讯开源框架TDesign UI框架\thttps://gitee.com/yixiacoco/ruoyi-tdesign\nRuoYi-AiDex-lmw\tRuoYi-Vue的ui美化版本，重点进行前端重构\thttps://gitee.com/codelm/ruoyi-vue3-lmw\nRuoYi-Vue-Flex\t集成MyBatis-Flex、JDK17、Sa-Token、PowerJob等组件\thttps://gitee.com/dataprince/ruoyi-flex\nRuoYi-Vue-Super\t集成Websocket、Flowable、Xdh-Map、可视化开发等组件\thttps://gitee.com/rainsuper/RuoYi-Vue-Super\nRuoYi-Vue-Source\t集成Flowable、Websocket、报表、支付等组件的零代码版本\thttps://gitee.com/open-source-byte/source-vue\nRuoYi-Vue-Nocode\t集成Activiti7、Mongodb、Form-Making等组件的零代码版本\thttps://gitee.com/atlus/ruoyi-vue-nocode\nRuoYi-Vue-Plus-Activiti\t集成的activiti工作流版本\thttps://gitee.com/sgs98/RuoYi-Vue-Plus-Activiti\nRuoYi-Vue-Plus-Flowable\t集成的flowable工作流版本\thttps://gitee.com/KonBAI-Q/ruoyi-flowable-plus\nRuoYi-Vue-YuXi\t集成Sa-Token、magic-api、Hutool 等组件\thttps://gitee.com/histoneUp/yu-xi-admin\nRuoYi-Vue-Tool\t实现低代码功能、页面水印，支持功能号动态建立业务等功能\thttps://gitee.com/xinjiangwangwei/ruoyi-tool\nRuoYi-Vue-S\t集成Mybatis-Plus、多租户、动态数据权限、OSS云存储等组件\thttps://gitee.com/sunseagear/RuoYi-Vue-S\nRuoYi-Vue-MultiTenant\tRuoYi-Vue的多租户版本\thttps://gitee.com/leslie8195/ruo-yi-vue-multi-tenant\nRuoYi-Vue-SaToken\tRuoYi-Vue的SaToken版本\thttps://gitee.com/wangming123456/ruoyi-satoken\nRuoYi-Vue3-Ts\tRuoYi-Vue3的Ts版本\thttps://gitee.com/lyforvue/ruoyi_vue3_ts\nRuoYi-Vue3-Ts\tRuoYi-Vue3的Ts版本\thttps://github.com/zzh948498/RuoYi-Vue3-ts\nRuoYi-Vue-Mobile\tRuoYi-Vue的移动端Uniapp版本，集成uView2.0+u-charts等组件\thttps://gitee.com/yinm/RuoYi-Mobile\nRuoYi-Vue-Uniapp\tRuoYi-Vue的移动端Uniapp版本\thttps://gitee.com/big-hedgehog/ruoyi-uniapp\nRuoYi-Vue-Flutter\tRuoYi-Vue的移动端Flutter版本\thttps://github.com/420136525/ruoyi_flutter_app\nRuoYi-Vue-Uniapp\tRuoYi-Vue的移动端Uniapp版本包括权限认证、字典翻译等\thttps://gitee.com/_q494000616q_/ruoyi-uniapp\nRuoYi-Mybatis-Plus-Join\tRuoYi-Vue的Mybatis-Plus-Join，集成权限框架Sa-Token\thttps://gitee.com/Duke_yzl/RuoYi-Vue\nRuoYi-R2dbc\tRuoYi-Vue的R2dbc版本\thttps://gitee.com/sn-yang/ruoyi-webflux-r2dbc-vue3\nRuoYi-Vue-Hibernate\tRuoYi-Vue的Hibernate版本\thttps://gitee.com/inprise80/ruoyi-vue-hibernate2\nRuoYi-Sqlite\tRuoYi-Vue的Sqlite版本\thttps://gitee.com/lucky__jie/RuoYi-Sqlite\nRuoYi-Sqlite\tRuoYi-Vue的Sqlite版本\thttps://gitee.com/tianyv/ruoyi-sqlite3\nRuoYi-Jpa\tRuoYi-Vue的jpa版本\thttps://gitee.com/bright-sword-40/ruoyi-jpa\nRuoYi-dameng\tRuoYi-Vue的达梦DM8的版本\thttps://gitee.com/azun/ruoyi-dameng\nRuoYi-hgdb\tRuoYi-Vue的瀚高数据库版本\thttps://gitee.com/ruralqiu/ruo-yi-vue-hgdb-master\nRuoYi-metaee\tRuoYi-Vue + MybatisPlus + dynamic-datasource + Knife4j等\thttps://gitee.com/metaee/metaee-boot\nRuoYi-Mybatis-Plus\tRuoYi-Vue + MybatisPlus 纯净版、项目全栈脚手架\thttps://gitee.com/tellsea/ruoyi-vue-plus\nRuoYi-Mybatis-Plus\tRuoYi-Vue + MybatisPlus + Lombok + 国产数据库适配\thttps://gitee.com/sou100/ruoyi-mybatis-plus\nRuoYi-Vue-Plus-Sqlserver\tRuoYi-Vue + MybatisPlus + Sqlserver版本\thttps://gitee.com/qu_bing/ruoyi-vue-plus-sqlserver\nRuoYi-Vue-Plus-Tdengine\tRuoYi-Vue + MybatisPlus + Tdengine版本\thttps://gitee.com/zhangbg/ruoyi-plus-tdengine\nRuoYi-Vue-FluentMyBatis\tRuoYi-Vue版，集成Fluent-Mybatis，适配代码生成器\thttps://lemonbx.coding.net/public/ruoyi/ruoyi-vue-fluentmybatis/git\nRuoYi-Vue-tkmapper\tRuoYi-Vue的tk.mapper版本\thttps://gitee.com/caiwl_admin/ruoyi-vue-tkmapper\nRuoYi-Vue-Nway-JDBC\tRuoYi-Vue的Nway-JDBC版本\thttps://gitee.com/nway/RuoYi-Vue/tree/nway\nRuoYi-Vue-Nutz\tRuoYi-Vue的Nutz框架版本\thttps://github.com/TomYule/ruoyi-vue-nutz\nRuoYi-Vue-Postgresql-Electron\tRuoYi-Vue的Postgresql的桌面版，要集成了web桌面打印\thttps://gitee.com/suxia2/ruo-yi-vue-postgresql-electron\nRuoYi-Vue-Postgresql\tRuoYi-Vue的Postgresql版本\thttps://gitee.com/suxia2/RuoYi-Vue-Postgresql\nRuoYi-Vue-Postgresql\tRuoYi-Vue的Postgresql版本\thttps://gitee.com/cheenmo/ruoyi-vue-pg\nRuoYi-Vue-Postgresql\tRuoYi-Vue的Postgresql版本\thttps://gitee.com/p0mp0k0/RuoYi-Vue-Postgresql\nRuoYi-Vue-Postgresql\tRuoYi-Vue的Postgresql版本\thttps://github.com/Mr8god/RuoYi-Vue-PostgreSQL\nRuoYi-Vue-Solon\t基于若依Solon框架版本，集成Sa-Token、MyBatis-Flex等组件\thttps://gitee.com/min290/warm-sun\nRuoYi-Vue-Python\t基于若依Python语言版本\thttps://gitee.com/liqianglog/django-vue-admin/tree/v1.1.2\nRuoYi-Vue-Go\t基于若依Go语言版本\thttps://gitee.com/tiger1103/gfast/tree/os-v2\nRuoYi-Vue3-Go\t基于RuoYi-Vue3的Go语言版本\thttps://gitee.com/smell2/BaiZe\nRuoYi-Vue3-vuecli\t基于RuoYi-Vue3的vue-cli版本\thttps://gitee.com/cicada-singing/ruoyi-vue3-cli\nRuoYi-Vue-egg\t基于RuoYi-Vue的egg框架版本\thttps://gitee.com/zhumingmark/ruoyi-egg\nRuoYi-Vue-wind\t集成Mybatis-Plus、shardingsphere、lombok等组件\thttps://gitee.com/zhangmrit/RuoYi-Vue\nRuoYi-Vue-Ks\t集成Mybatis-Plus、knife4j、Hutool、lombok等组件\thttps://gitee.com/xieke90/RuoYi-Vue-Ks\nRuoYi-Vue-Mybatis-plus\t集成Mybatis-Plus、EasyCaptcha、lombok及模块调整\thttps://gitee.com/nottyjay/ruoyi-vue-mybatis-plus\nRuoYi-Vue-BeetlSql\t集成Lombok+BeetlSql3.X+Undertow\thttps://gitee.com/JavaLionLi/RuoYi-Vue-BeetlSql\nRuoYi-Vue-Keycloak\t集成了keycloak单点登录功能\thttps://gitee.com/greetings_gitee/RuoYiVueKeycloak\nRuoYi-Vue3-Cas\t集成了RuoYi-Vue3 + CAS5.3.16单点登录功能\thttps://gitee.com/mikulove666/ruoyi-vue-cas\nRuoYi-Vue-Cas\t集成了spring-security-cas单点登录功能\thttps://gitee.com/ggxforever/RuoYi-Vue-cas\nRuoYi-Vue-Gradle\t集成Gradle + Kotlin版本\thttps://gitee.com/yizems/RuoYi-Vue/tree/gradle-kotlin\nRuoYi-Vue-Node\t采用Midwayjs框架研发Node服务端体验\thttps://gitee.com/TsMask/mask_api_midwayjs\nRuoYi-Antdv-Flowable-plus\t美化Antv + MybatisPlus + Flowable版本\thttps://gitee.com/lwq8886666/ruo-yi-antdv-flowable-plus\nRuoYi-Vue-UUID\tRuoYi-Vue修改主键为UUID版本\thttps://gitee.com/allen056/ruo-yi-vue-uuid\nRuoYi-Vue_Oauth2.0\t集成Oauth2.0实现登录，认证授权\thttps://pan.baidu.com/s/1OVgEAe9mwBc6kkKHxX8ZCA（提取码: c475）\nRuoYi-Vue-Atomikos\t集成atomikos分布式事务\thttps://gitee.com/zsiyang/ruoyi-vue-atomikos\nRuoYi-Vue-Report\t集成数据大屏、地图示例（热力图、区域图、检索等）\thttps://gitee.com/greenant/Ruoyi-vue-Report\nRuoYi-Vue-Process\t基于闲鹿工作流版本的扩展\thttps://gitee.com/laya1989/ruo-yi-vue-process-3.4.0\nRuoYi-Vue-YunaiV\t集成文件服务、apollo、监控、分布式锁等组件\thttps://github.com/YunaiV/ruoyi-vue-pro\nRuoYi-Vue-Swagger\t集成Swagger-bootstrap-ui，支持代码生成Api...\thttps://gitee.com/juniorRay/ruoyi-vue-swagger\nRuoYi-Vue-GoogleTotp\t集成google authenticator，支持角色树形模式...\thttps://gitee.com/richardgong1987/RuoYi-baby\nRuoYi-Vue-expand\t集成Ureport2、积木报表、雪花主键\thttps://gitee.com/magb/ruoyi-vue-expand\nRuoYi-Vue-JFinal\t集成JFinal作为web框架\thttps://gitee.com/ycss/habit\nRuoYi-hh-vue\t集成Freemarker代码生成，集成mybatis-plus，自研工作流\thttps://gitee.com/min290/hh-vue\nRuoYi-mymx2\t基于若依核心工具包、自动配置、多租户\thttps://gitee.com/mymx2/RuoYi-Vue\nRuoYi-Tellsea\t基于若依的Java全栈脚手架\thttps://gitee.com/tellsea/project-system\nRuoYi-Vue-uniapp-wx\t基于若依后台管理系统的微信小程序\thttps://gitee.com/rahman/AbuCoder-RuoYi-Vue-uniapp-wx\nRuoYi-Vue-wechat-mp\t集成公众号模板，微信网页授权认证\thttps://gitee.com/suimu/ruoyi-wechat-mp\nRuoYi-Vue-DocHub\t基于RuoYi-Vue的在线写作平台，支持多种文档类型编辑或分享\thttps://gitee.com/Ning310975876/ruo-yi-vue-docHub\nRuoYi-Vue-Blog\t基于RuoYi-Vue的博客网站\thttps://gitee.com/Ning310975876/ruo-yi-vue-blog\nRuoYi-Vue-KMS\t基于RuoYi-Vue的知识管理系统\thttps://gitee.com/chenzuheng001/RuoYi-Vue-KMS\nRuoYi-Vue-MES\t基于RuoYi-Vue的MES生产执行管理系统\thttps://gitee.com/kutangguo/ktg-mes\nRuoYi-Vue-CMS\t基于RuoYi-Vue的CMS内容管理系统\thttps://gitee.com/liweiyi/RuoYi-Vue-CMS\nRuoYi-Shenbao-iot\t基于RuoYi-Vue的开源物联网基础平台\thttps://gitee.com/jinanchang/Shenbao-iot\nRuoYi-link-wechat\t基于人工智能的企业微信 SCRM 综合解决方案\thttps://gitee.com/LinkWeChat/link-wechat\nRuoYi-V-IM\t基于若依超轻量级聊天软件\thttps://gitee.com/lele-666/V-IM\nRuoYi-Vue-easy-report\t基于若依在线Web报表工具平台\thttps://gitee.com/devzwd/easy-report\nRuoYi-wx\t基于若依微信管理平台\thttps://gitee.com/joolun/JooLun-wx\nRuoYi-wxopen\t基于若依微信服务商平台\thttps://gitee.com/mxiaoguang/wxopen\nRuoYi-kwswitch\t基于若依智能开关平台\thttps://gitee.com/kerwincui/kwswitch\nRuoYi-ewem\t基于若依溯源防伪系统\thttps://gitee.com/qrcode_project/ewem\nRuoYi-zhunian\t基于若依支付系统\thttps://gitee.com/zhunian/smart-pay-plus-vue\nRuoYi-wumei\t基于若依智能家居系统\thttps://gitee.com/kerwincui/wumei-smart\nRuoYi-tanhuihuang\t基于若依电影视频系统\thttps://gitee.com/tanhuihuang/ruoyi-media\nRuoYi-knowledgegraph\t基于可视化知识图谱\thttps://gitee.com/liaoquefei/knowledgegraph\nRuoYi-mall\t基于若依电商管理系统\thttps://gitee.com/zccbbg/RuoYi-Mall\nRuoYi-Wms\t基于若依仓库管理系统\thttps://gitee.com/zccbbg/wms-ruoyi\nRuoYi-payshop\t基于若依多商户商城管理系统\thttps://gitee.com/JiaGou-XiaoGe/payshop\nRuoYi-shop\t基于若依和litemall的商城后台融合项目\thttps://gitee.com/hgl168918/ruoyi-shop\nRuoYi-crm\t基于若依平的多租户CRM系统\thttps://gitee.com/jundee/RuoyiCRM\nRuoYi-zhaoxinpms\t基于若依的智慧物业系统\thttps://gitee.com/fanhuibin1/zhaoxinpms\nRuoYi-community\t基于若依的智慧社区系统\thttps://gitee.com/hebei-zhiyu-network/community-web\nRuoYi-huohuzhihui\t基于若依的智慧园区一卡通\thttps://gitee.com/huohuzhihui/ykt\nRuoYi-manager\t基于若依的内部管理软件\thttps://gitee.com/jetlion-software/zs-manager\nRuoYi-Vue-SmsLogin\t集成短信登录功能\thttps://github.com/chougui123/RuoYi-Vue-SmsLogin\nRuoYi-fastbuild-factory\t若依框架包名修改器\thttps://gitee.com/yinm/fastbuild-factory\nRuoYi-common-tools\t若依框架包名修改器\thttps://gitee.com/lpf_project/common-tools\n\n← 插件集成\n视频教程 →"
  }
]
